{"version":3,"sources":["components/navigation.js","queries/posts/index.js","components/commons/component/Post_Like_Dislike.js","components/commons/component/ContentCard.js","components/commons/home-post/index.js","components/commons/navigation/create-post-nav.js","components/commons/navigation/directory.js","components/commons/functions/isLiteralObject.js","components/commons/functions/getgraphqlquery.js","pages/home.js","components/commons/community-post/community-post_about.js","components/commons/component/ContentCard_Community-Post.js","components/commons/community-post/community-post_post.js","components/commons/community-post/functions/community-post_join_leave_community.js","pages/community-post.js","components/commons/community-home/community-home.js","components/commons/community-home/hover-communitydetail.js","pages/communities.js","components/commons/edit-community/EditCommunityDropDown.js","components/commons/edit-community/functions/mutation.js","pages/edit-community.js","pages/create-community.js","components/commons/LoginOrRegister/login-or-register.js","components/commons/functions/imageuploading.js","components/commons/create-post/createpost-form.js","components/commons/create-post/createpost_community_rules.js","components/commons/create-post/dropdown_community.js","components/commons/create-post/createpost_menu.js","pages/create-post.js","components/commons/viewpost/components/functions.js","components/commons/viewpost/showPost.js","components/commons/viewpost/editPost.js","components/commons/viewpost/viewpost-comments/comments.js","pages/viewpost.js","components/commons/viewpost/components/reloadMessage.js","components/commons/functions/validateForm.js","pages/user/login.js","pages/user/register.js","pages/user/forgotpassword.js","pages/user/account.js","components/commons/accountsettings/functions.js","pages/user/accountsettings.js","components/commons/inbox/index.js","pages/user/inbox.js","components/commons/viewaccount/Overview.js","components/commons/viewaccount/Post_List.js","components/commons/viewaccount/Comment_List.js","pages/user/viewAccount.js","pages/error.js","pages/unauthorized.js","pages/router.js","App.js","reportWebVitals.js","index.js"],"names":["navLink","title","path","Navigation","wrapperRef","useRef","buttonRef","menuActive","setMenuActive","useState","cookies","removeCookie","set","useCookies","history","useHistory","useEffect","document","addEventListener","handleOutsideClicks","removeEventListener","event","current","contains","target","className","ref","map","link","index","to","size","src","placement","overlay","undefined","userCookie","Item","onClick","sameSite","secure","Message","success","content","style","marginTop","push","e","preventDefault","username","DownOutlined","gql","GET_POST_RECENT_BY_AUTHOR_ID","GET_POSTS_RECENT","GET_POST_COMMENTS","GET_ALL_COMMUNITIES","GET_COMMUNITY_POSTS_USER","GET_COMMUNITY_USER","CHECK_COMMUNITY_NAME","GET_COMMUNITYUSERROLE_AND_USER_AND_POST","GET_COMMUNITYUSERROLE_BY_USER","GET_FAMILY_COMMENTS","GET_USER","GET_USER_BY_EMAIL","GET_ALL_USER","GET_VIEW_ACCOUNT","CHECK_USER_EMAIL","CHECK_USER_PASSWORD","CHECK_QUESTION","CHECK_EMAIL_AND_PASSWORD","LOGIN_USER","GET_MESSAGES_AND_SENT_MESSAGES","CHECK_POST_UPVOTE","CHECK_POST_DOWNVOTE","GET_SECURITY_QUESTIONS_BY_AUTHOR_ID","CREATE_POST","UPDATE_POST","DELETE_POST","LOCK_POST","CREATE_COMMENT","UPDATE_COMMENT","DELETE_COMMENT","DELETE_PARENT_COMMENT","CREATE_COMMUNITY","UPDATE_COMMUNITY_USER_ROLE","UPDATE_COMMUNITY_DETAILS","CREATE_USER_COMMUNITY_USER_ROLE","REMOVE_USER_COMMUNITY_USER_ROLE","BAN_USER","UNBAN_USER","REGISTER_USER","CHANGE_USER_INFO","CHANGE_USER_PASSWORD","SEND_MESSAGE","DELETE_MESSAGE","DELETE_MESSAGE_SENDER_RECIPIENT","POST_UPVOTE","POST_DOWNVOTE","REMOVE_POST_UPVOTE","REMOVE_POST_DOWNVOTE","CREATE_SECURITY_QUESTION","UPDATE_SECURITY_QUESTION","REMOVE_SECURITY_QUESTION","async","OnFinish_CheckPost_Upvote_Downvote","check","mutation","refetch","author_id","post_id","variables","post_upvote_downvote","OnFinish_Remove","removeMutation","OnFinish","upvote_downvote_mutation","Post_Like_Dislike","post","postUpVote","useMutation","removePostUpvote","checkPostDownvote","useLazyQuery","postDownVote","removePostDownvote","checkPostUpvote","warning","post_upvotes","length","post_downvotes","find","item","id","color","Text","Typography","Title","community","type","user","moment","parseInt","created_at","format","fromNow","ContentCard","actions","pathname","whiteSpace","text","wordWrap","href","alt","image","maxWidth","Post","postQueryRefetch","itemLayout","pagination","position","pageSize","dataSource","renderItem","CreatePostNav","createpost","state","mode","icon","placeholder","fontSize","Directory","marginBottom","isLiteralObject","a","constructor","Object","GetGraphqlQueryID","param","query","data","error","loading","useQuery","GetGraphqlQuery","GetGraphqlQueryID_Refetch","Home","postQuery","GetGraphqlQuery_Refetch","communityQuery","textAlign","paddingTop","confirm","Modal","AboutCommunity","pageID","userID","JoinCommunity","joinMutation","LeaveCommunity","leaveMutation","communityuserrole","user_id","communityBan","communityban","LeaveCommunityConfirm","okText","onOk","width","extra","role_id","paddingRight","public","summary","CommunityPost_Post","community_id","obj","CommunityPost","useParams","createUser_CommunityUserRole","removeUser_CommunityUserRole","CommunityHome","setHovered","searchParam","setSearch","header","onChange","value","toLowerCase","includes","onMouseEnter","CommunityDetail","Community","hoveredCommunity","onMouseLeave","confirmUpdateRole","role_title","object","changeRole","EditCommunityDropDown","key","confirmRemoveUser","removeUser","confirmBanUser","ban_user","confirmUnbanUser","unban_user","TabPane","Tabs","EditCommunity","currentTab","setTab","updateRole","removeUserCommunityUserRole","updateCommunityDetails","banUser","unbanUser","currentUser","element","defaultActiveKey","tab","marginRight","label","email","role","owner_id","owner_role_id","labelCol","span","wrapperCol","name","onFinish","values","description","updateDetails","initialValue","TextArea","offset","htmlType","float","Input","CreateCommunity","communityTitle","setComTitle","communityObj","setComObj","myStorage","window","localStorage","getTitle","onCompleted","getItem","clear","communityUser","location","reload","emptyValues","setItem","rows","spellCheck","LoginOrRegister","marginLeft","ImageUploadingComponent","imageState","setImageState","multiple","imageList","maxNumber","dataURLKey","onImageUpload","onImageUpdate","onImageRemove","FormSubmit","disabled","images","createPost","getPostRecentByAuthorID","active","CreatePostForm","setImages","fetchPolicy","allowClear","Rules","Community_Rules_Card","Dropdown_Community","setCommunity","CreatePost_Menu","currentMenu","setMenu","selectedKeys","CreatePost","useLocation","showConfirmDelete","passedPost","deletePostMutation","commentLength","comment","deleteOnFinish","showConfirmLock","lockPostMutation","lockOnFinish","contentSwitch","maxHeight","display","Header","ShowPost","isEditable","triggerEditable","EditPost","post_type","update_post_mutation","formValues","updated_at","Date","toString","EditPost_OnFinish","ContentDisplay","initialValues","layout","ChildComments","commentsObj","parentID","handleChange","handleSubmit","handleEditSubmit","showConfirm","setDisplay","editDisplay","setEditDisplay","filter","cc","parent_comment_id","cObj","cursor","author","datetime","Editor","EditorKey","onSubmit","defaultValue","fontWeight","Comments","parentComments","pc","setValue","editMutation","deleteMutation","deleteParentMutation","familyComment","setFamilyComment","checkParenthood","handleDeleteSubmit","child","parent","passedID","ViewPost","editPostToggle","setEditPostToggle","createCommentMutation","reloadMessage","PostEditable","toggle","comment_onFinish","validateForm","count","property","duration","Login","loginUser","result","expires","onError","err","password","prefix","Register","setUser","registerUser","getUser","Email","Password","Username","ConfirmPassword","Forgot","setQuery","randomNum","setRandom","changePassword","getQuestions","getUserByEmail","checkQuestion","results","security_question","max","security_questions","Math","floor","random","answer","question","OnFinish_ResetPassword","OnFinish_Email","PersonalCard","shape","borderStyle","backgroundColor","Account","queryRefetch","UpdateConfirm","checkPassword_UpdateQuestion","setInputObject","closable","okButtonProps","cancelButtonProps","OnFinish_UpdateQuestion","autoComplete","RemoveConfirm","checkPassword_RemoveQuestion","OnFinish_RemoveQuestion","AccountSettings","inputObject","accountForm","Form","useForm","passwordForm","questionForm","changeUserInfo","createQuestion","updateQuestion","removeQuestion","securityQuestions","resetCookies","checkEmailAndPassword","passwordCheck","emailCheck","setFieldsValue","checkPassword","resetFields","checkPassword_CreateQuestion","securityQuestion","form","OnFinish_CheckEmailAndPassword","NewPassword","OnFinish_CheckPassword","bordered","OnFinish_CreateQuestion","Panel","Collapse","responseConfirm","sendMessage","messageRefetch","subject_line","message","sender_id","recipient_id","response","destroyAll","responseOnFinish","maskClosable","deleteMessageOnFinish","isSender","deleteMessage","deleteMessageSender_Recipient","recipient_delete","sender_delete","SentFromMessage","recipientFilter","setRecipientFilter","messageQuery","level","Button","Set","sender","onConfirm","cancelText","SentToMessage","senderFilter","setSenderFilter","sentMessage","recipient","SendMessage","selectedUser","setSelectedUser","search","getAllUserQuery","forEach","onClose","stopPropagation","Inbox","CommentInCard","fill","StandAloneCommentTitle","StandAloneComment","PostCommentCard","isPost","Overview","posts","comments","filteredComments","post_comment","concat","sort","b","keyA","keyB","Avatar_For_List","Description_Actions","expand","setExpand","overflowCount","Description_For_List","Post_List","hideOnSinglePage","Meta","avatar","ListContent","Comment_List","ViewAccount","Error","goBack","Unauthorized","Router","component","ForgotPassword","exact","App","CookiesProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cache","InMemoryCache","httpLink","HttpLink","uri","client","ApolloClient","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c0c778fc.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from 'antd/lib/avatar'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useCookies } from 'react-cookie'\r\nimport Message from 'antd/lib/message'\r\n\r\nimport Menu from 'antd/lib/menu'\r\nimport Dropdown from 'antd/lib/dropdown'\r\nimport { DownOutlined } from '@ant-design/icons'\r\n\r\n//Navigation Bar options\r\nconst navLink = [\r\n    {\r\n        title: 'Home',\r\n        path: '/'\r\n    },\r\n    {\r\n        title: 'Community',\r\n        path: '/communities'\r\n    },\r\n    {\r\n        title: 'Inbox',\r\n        path: '/inbox'\r\n    }\r\n]\r\n\r\n//Navigation Bar Component\r\nexport default function Navigation() {\r\n    //Set menuActive to false when loading page\r\n    const wrapperRef = useRef(null);\r\n    const buttonRef = useRef(null);\r\n    const [menuActive, setMenuActive] = useState(false)\r\n    const [cookies, removeCookie, set] = useCookies(['userCookie'])\r\n    let history = useHistory()\r\n\r\n    //below is the same as componentDidMount and componentDidUnmount\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleOutsideClicks, true)\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleOutsideClicks, true)\r\n        }\r\n    }, [])\r\n\r\n    const handleOutsideClicks = event => {\r\n        if(buttonRef.current && buttonRef.current.contains(event.target)) {\r\n            return\r\n        }\r\n        if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n            setMenuActive(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <nav className={`site-navigation ${menuActive && 'active'}`}>\r\n            <span className=\"menu-title\"> My Awesome React Forum </span>\r\n            <div className=\"menu-content-container\" ref={wrapperRef}>\r\n                <ul>\r\n                    {\r\n                        navLink.map((link, index) => (\r\n                            <li key={index}>\r\n                                <Link to={link.path}>{link.title}</Link>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n                <div className=\"menu-avatar-container\">\r\n                    <Avatar size={50} src=\"https://joeschmoe.io/api/v1/jenni\" />\r\n                    <Dropdown placement=\"bottomRight\" overlay={\r\n                        cookies.userCookie == undefined || cookies.userCookie == \"undefined\" ? (\r\n                            <Menu>\r\n                                <Menu.Item key=\"0\">\r\n                                    <Link to=\"/login\">Login</Link> \r\n                                </Menu.Item>\r\n                                \r\n                                <Menu.Item key=\"1\">\r\n                                    <Link to=\"/register\">Register</Link> \r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        ) : (\r\n                            <Menu>\r\n                                <Menu.Item key=\"0\">\r\n                                    <Link to={ '/account' }>Account</Link>\r\n                                </Menu.Item>\r\n                                <Menu.Item key=\"1\" onClick={() => {\r\n                                    set('userCookie', { path: '/', sameSite:'lax',secure: true })//Sets current user cookie to null\r\n                                    Message.success({\r\n                                        content: 'You successfully logged out.',\r\n                                        style: {\r\n                                          marginTop: '10vh',\r\n                                        },\r\n                                    },7)\r\n                                    history.push('/')\r\n                                }}>\r\n                                    Log Out\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        )\r\n                    }>\r\n                        <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                            {\r\n                                cookies.userCookie == undefined ? (\r\n                                    <span className=\"menu-avatar-name\">Guest </span>\r\n                                ) : (\r\n                                    <span className=\"menu-avatar-name\">{ cookies.userCookie.username} </span>\r\n                                )\r\n                            }\r\n                            <DownOutlined />\r\n                        </a>\r\n                    </Dropdown>\r\n                </div>\r\n            </div>\r\n            <i className=\"icon ionicons ion-ios-menu\" ref={buttonRef} onClick={(event) => setMenuActive(!menuActive)}> </i>\r\n        </nav>\r\n    )\r\n}\r\n/*\r\n\r\nset('user', undefined, {secure: true, sameSite: 'none'})\r\nset('user', \"\",{path: '/', sameSite:'lax',secure: true, expires: 0})\r\n*/","import gql from 'graphql-tag'\r\n\r\nexport const GET_POST = gql`\r\n    query getPost($id: ID!) {\r\n        post: getPost(id: $id) {\r\n            id\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            updated_at\r\n            created_at\r\n        }\r\n    }\r\n`\r\nexport const GET_POST_RECENT_BY_AUTHOR_ID = gql`\r\n    query getPostRecentByAuthorID($id: ID!) {\r\n        post: getPostRecentByAuthorID(id: $id) {\r\n            id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const GET_POSTS_BY_AUTHOR_ID = gql`\r\n    query getPostsbyAuthorID($post_id: ID!, $author_id: ID!) {\r\n        post: getPostsbyAuthorID(post_id: $post_id, author_id: $author_id) {\r\n            id\r\n            author_id\r\n            user {\r\n                id\r\n                username\r\n            }\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            community_id\r\n            community {\r\n                id\r\n                title\r\n            }\r\n            updated_at\r\n            created_at\r\n        }\r\n    }\r\n`\r\nexport const GET_POSTS_BY_AUTHOR_ID_RECENT = gql`\r\n    query getPostsbyAuthorIDRecent($post_id: ID!, $author_id: ID!) {\r\n        post: getPostsbyAuthorIDRecent(post_id: $post_id, author_id: $author_id) {\r\n            id\r\n            author_id\r\n            user {\r\n                id\r\n                username\r\n            }\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            community_id\r\n            community {\r\n                id\r\n                title\r\n            }\r\n            updated_at\r\n            created_at\r\n        }\r\n    }\r\n`\r\nexport const GET_POSTS_RECENT = gql`\r\n    query getPostsRecent {\r\n        post: getPostsRecent {\r\n            id\r\n            author_id\r\n            community_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            updated_at\r\n            created_at\r\n            user {\r\n                id\r\n                email\r\n                username\r\n            }\r\n            community {\r\n                id\r\n                title\r\n                summary\r\n            }\r\n            post_upvotes {\r\n                post_id\r\n                author_id\r\n            }\r\n            post_downvotes {\r\n                post_id\r\n                author_id\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_POSTS_COMMUNITYPOSTS = gql`\r\n    query getPosts_CommunityPosts($id: ID!) {\r\n        posts: getPosts_CommunityPosts(id: $id) {\r\n            id\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            updated_at\r\n            created_at\r\n        }\r\n    }\r\n`\r\nexport const GET_POST_COMMENTS = gql`\r\n    query getPost($id: ID!) {\r\n        post: getPost(id: $id) {\r\n            id\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            updated_at\r\n            created_at\r\n            community_id\r\n            community {\r\n                id\r\n                title\r\n                summary\r\n            }\r\n            user {\r\n                id\r\n                email\r\n                username\r\n            }\r\n            comment {\r\n                id\r\n                post_id\r\n                author_id\r\n                parent_comment_id\r\n                comment\r\n                updated_at\r\n                created_at\r\n                user {\r\n                    id\r\n                    email\r\n                    username\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITY = gql`\r\n    query getCommunity($id: ID!) {\r\n        community: getCommunity(id: $id) {\r\n            id\r\n            title\r\n            summary\r\n        }\r\n    }\r\n`\r\nexport const GET_ALL_COMMUNITIES = gql`\r\n    query getAllCommunities {\r\n        community: getAllCommunities {\r\n            id\r\n            title\r\n            summary\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITY_POSTS_USER = gql`\r\n    query getCommunity_Posts_Users($id: ID!) {\r\n        community: getCommunity_Posts_Users(id: $id) {\r\n            id\r\n            title\r\n            public\r\n            summary\r\n            communityban {\r\n                community_id\r\n                user_id\r\n            }\r\n            communityuserrole {\r\n                community_id\r\n                user_id\r\n                role_id\r\n                user {\r\n                    id\r\n                    email\r\n                    username\r\n                }\r\n            }\r\n            post {\r\n                id\r\n                author_id\r\n                title\r\n                type\r\n                image\r\n                text\r\n                active\r\n                updated_at\r\n                created_at\r\n                post_upvotes {\r\n                    post_id\r\n                    author_id\r\n                }\r\n                post_downvotes {\r\n                    post_id\r\n                    author_id\r\n                }\r\n                user {\r\n                    id\r\n                    email\r\n                    username\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITY_USER = gql`\r\nquery getCommunity_User($id: ID!) {\r\n    community: getCommunity_User(id: $id) {\r\n        id\r\n        title\r\n        public\r\n        summary\r\n        communityuserrole {\r\n            community_id\r\n            user_id\r\n            role_id\r\n            user {\r\n                id\r\n                email\r\n                username\r\n            }\r\n            role {\r\n                id\r\n                title\r\n                rolespermissions {\r\n                    role_id\r\n                    permission_id\r\n                    permission {\r\n                        id\r\n                        action\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        communityban {\r\n            community_id\r\n            user_id\r\n            user {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\nexport const CHECK_COMMUNITY_NAME = gql`\r\n    query checkCommunityName($name: String!) {\r\n        community: checkCommunityName(name: $name) {\r\n            id\r\n            title\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITY_USER_ROLE = gql`\r\n    query getCommunityUserRole($id: ID!) {\r\n        communityuserrole: getCommunityUserRole(id: $id) {\r\n            community_id\r\n            user_id\r\n            role_id\r\n            community {\r\n                id\r\n                title\r\n                post {\r\n                    id\r\n                    author_id\r\n                    user {\r\n                        id\r\n                        username\r\n                        email\r\n                    }\r\n                    community {\r\n                        id\r\n                        title\r\n                        summary\r\n                    }\r\n                    title\r\n                    type\r\n                    image\r\n                    text\r\n                    active\r\n                    updated_at\r\n                    created_at\r\n                }\r\n            }\r\n            user {\r\n                id\r\n                username\r\n            }\r\n            role {\r\n                id\r\n                title\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITYUSERROLE_AND_USER_AND_POST = gql`\r\n    query getCommunityUserRole_User_Post($id: ID!) {\r\n        communityuserrole: getCommunityUserRole(id: $id) {\r\n            community_id\r\n            user_id\r\n            role_id\r\n            community {\r\n                id\r\n                title\r\n                post {\r\n                    id\r\n                    author_id\r\n                    title\r\n                    type\r\n                    image\r\n                    text\r\n                    active\r\n                    updated_at\r\n                    created_at\r\n                    post_upvotes {\r\n                        post_id\r\n                        author_id\r\n                    }\r\n                    post_downvotes {\r\n                        post_id\r\n                        author_id\r\n                    }\r\n                    user {\r\n                        id\r\n                        username\r\n                        email\r\n                    }\r\n                    community {\r\n                        id\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n            role {\r\n                id\r\n                title\r\n            }\r\n        }\r\n        user: getUser(id: $id) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n        post: getPostsbyAuthorID(post_id: null, author_id: $id) {\r\n            id\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            community_id\r\n            updated_at\r\n            created_at\r\n            user {\r\n                id\r\n                username\r\n            }\r\n            community {\r\n                id\r\n                title\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITYUSERROLE_BY_USER = gql`\r\n    query getCommunityUserRoleByUser($id: ID!) {\r\n        communityuserrole: getCommunityUserRoleByUser(id: $id) {\r\n            community_id\r\n            user_id\r\n            community {\r\n                id\r\n                title\r\n                summary\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMUNITYUSERROLE_BY_COMMUNITY = gql`\r\n    query getCommunityUserRoleByCommunity($id: ID!) {\r\n        communityuserrole: getCommunityUserRoleByCommunity(id: $id) {\r\n            community_id\r\n            user_id\r\n            role_id\r\n            user {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMENT = gql`\r\nquery getComment($id: ID!) {\r\n    comment: getComment(id: $id) {\r\n        id\r\n        post_id\r\n        author_id\r\n        parent_comment_id\r\n        comment\r\n        updated_at\r\n        created_at\r\n    }\r\n}\r\n`\r\nexport const GET_COMMENTS_BY_POSTID = gql`\r\n    query getCommentsbyPostID($id: ID!) {\r\n        comment: getCommentsbyPostID(id: $id) {\r\n            id\r\n            post_id\r\n            author_id\r\n            comment\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMENTS_BY_AUTHOR_ID = gql`\r\n    query getCommentsbyAuthorID($id: ID!) {\r\n        comment: getCommentsbyAuthorID(id: $id) {\r\n            id\r\n            post_id\r\n            author_id\r\n            comment\r\n        }\r\n    }\r\n`\r\nexport const GET_COMMENTS_BY_AUTHOR_ID_RECENT = gql`\r\n    query getCommentsbyAuthorIDRecent($id: ID!) {\r\n        comment: getCommentsbyAuthorIDRecent(id: $id) {\r\n            id\r\n            post_id\r\n            author_id\r\n            comment\r\n        }\r\n    }\r\n`\r\nexport const GET_FAMILY_COMMENTS = gql`\r\n    query getFamilyComments($id: ID!) {\r\n        comment: getFamilyComments(id: $id) {\r\n            id\r\n            post_id\r\n            author_id\r\n            parent_comment_id\r\n            updated_at\r\n            created_at\r\n            comment\r\n            parent {\r\n                id\r\n                post_id\r\n                author_id\r\n                parent_comment_id\r\n                updated_at\r\n                created_at\r\n                comment\r\n            }\r\n            child {\r\n                id\r\n                post_id\r\n                author_id\r\n                parent_comment_id\r\n                updated_at\r\n                created_at\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_CHILD_COMMENTS = gql`\r\nquery getChildComments($id: ID!) {\r\n    comment: getChildComments(id: $id) {\r\n        id\r\n        post_id\r\n        author_id\r\n        parent_comment_id\r\n        comment\r\n        updated_at\r\n        created_at\r\n    }\r\n}\r\n`\r\nexport const GET_ROLES_PERMISSIONS = gql`\r\n    query getRolesPermissions($id: ID!) {\r\n        rolespermissions: getRolesPermissions(id: $id) {\r\n            role_id\r\n            permission_id\r\n            permission {\r\n                id\r\n                action\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_ROLE = gql`\r\n    query getRole($id: ID!) {\r\n        role: getRole(id: $id) {\r\n            id\r\n            title\r\n            rolespermissions {\r\n                role_id\r\n                permission_id\r\n                permission {\r\n                    id\r\n                    action\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_PERMISSION = gql`\r\n    query getPermission($id: ID!) {\r\n        permission: getPermission(id: $id) {\r\n            id\r\n            action\r\n        }\r\n    }\r\n`\r\nexport const GET_USER = gql`\r\n    query getUser($id: ID!) {\r\n        user: getUser(id: $id) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n    }\r\n`\r\nexport const GET_USER_BY_EMAIL = gql`\r\n    query getUserByEmail($email: String!) {\r\n        user: getUserByEmail(email: $email) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n    }\r\n`\r\nexport const GET_ALL_USER = gql`\r\n    query getAllUser {\r\n        user: getAllUser {\r\n            id\r\n            email\r\n            username\r\n        }\r\n    }\r\n`\r\nexport const GET_VIEW_ACCOUNT = gql` \r\n    query getViewAccount($id: ID!) {\r\n        user: getUser(id: $id) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n        post: getPostsbyAuthorIDRecent(post_id: null, author_id: $id) {\r\n            id\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            community_id\r\n            updated_at\r\n            created_at\r\n            community {\r\n                id\r\n                title\r\n            }\r\n            comment {\r\n                id\r\n                parent_comment_id\r\n                author_id\r\n                post_id\r\n                comment\r\n                updated_at\r\n                created_at\r\n                user {\r\n                    username\r\n                }\r\n                parent {\r\n                    id\r\n                    author_id\r\n                    comment\r\n                    updated_at\r\n                    created_at\r\n                    user {\r\n                        username\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        comment: getCommentsbyAuthorIDRecent(id: $id) {\r\n            id\r\n            post_id\r\n            author_id\r\n            parent_comment_id\r\n            comment\r\n            updated_at\r\n            created_at\r\n            user {\r\n                username\r\n            }\r\n            post {\r\n                id\r\n                title\r\n                author_id\r\n                community_id\r\n                user {\r\n                    id\r\n                    username\r\n                }\r\n                community {\r\n                    id\r\n                    title\r\n                }\r\n            }\r\n            parent {\r\n                id\r\n                author_id\r\n                comment\r\n                updated_at\r\n                created_at\r\n                user {\r\n                    username\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_USER_QUESTIONS = gql`\r\n    query getUserQuestion($email: String!) {\r\n        user: getUserQuestion(email: $email) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\nexport const CHECK_USER_EMAIL = gql`\r\n    query checkUserEmail($email: String!) {\r\n        user: checkUserEmail(email: $email) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\nexport const CHECK_USER_PASSWORD = gql`\r\n    query checkUserPassword($id: ID!, $password: String!) {\r\n        user: checkUserPassword(id: $id, password: $password) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\nexport const CHECK_QUESTION = gql`\r\n    query checkQuestion($user_id: ID!, $question: String!, $answer: String!) {\r\n        security_question: checkQuestion(user_id: $user_id, question: $question, answer: $answer) {\r\n            user_id\r\n            question\r\n        }\r\n    }\r\n`\r\nexport const CHECK_EMAIL_AND_PASSWORD = gql`\r\n    query checkEmailAndPassword($id: ID!, $email: String!, $password: String!) {\r\n        emailCheck: checkUserEmail(email: $email) {\r\n            id\r\n            email\r\n        }\r\n        passwordCheck: checkUserPassword(id: $id, password: $password) {\r\n            id\r\n            email\r\n        }\r\n    }\r\n`\r\nexport const LOGIN_USER = gql`\r\n    query loginUser($email: String!, $password: String!) {\r\n        user: loginUser(email: $email, password: $password) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n    }\r\n`\r\nexport const GET_MESSAGES_AND_SENT_MESSAGES = gql`\r\n    query getMessages_SentMessages($id: ID!) {\r\n        message: getMessages(id: $id) {\r\n            id\r\n            sender_id\r\n            recipient_id\r\n            subject_line\r\n            message\r\n            sender_delete\r\n            recipient_delete\r\n            created_at\r\n            sender {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n        sentMessage: getSentMessages(id: $id) {\r\n            id\r\n            sender_id\r\n            recipient_id\r\n            subject_line\r\n            message\r\n            sender_delete\r\n            recipient_delete\r\n            created_at\r\n            recipient {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_MESSAGES = gql`\r\n    query getMessages($id: ID!) {\r\n        message: getMessages(id: $id) {\r\n            id\r\n            sender_id\r\n            recipient_id\r\n            subject_line\r\n            message\r\n            sender_delete\r\n            recipient_delete\r\n            created_at\r\n            sender {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const GET_SENT_MESSAGES = gql`\r\n    query getSentMessages($id: ID!) {\r\n        sentMessage: getSentMessages(id: $id) {\r\n            id\r\n            sender_id\r\n            recipient_id\r\n            subject_line\r\n            message\r\n            sender_delete\r\n            recipient_delete\r\n            created_at\r\n            recipient {\r\n                id\r\n                email\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const CHECK_POST_UPVOTE = gql`\r\n    query checkPostUpvote($author_id: ID!, $post_id: ID!) {\r\n        post_upvote_downvote: checkPostUpvote(author_id: $author_id, post_id: $post_id) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const CHECK_POST_DOWNVOTE = gql`\r\n    query checkPostDownvote($author_id: ID!, $post_id: ID!) {\r\n        post_upvote_downvote: checkPostDownvote(author_id: $author_id, post_id: $post_id) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const GET_UPVOTES_POST_ID = gql`\r\n    query getUpvotes_PostID($id: ID!) {\r\n        post_upvote_downvote: getUpvotes_PostID(id: $id) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const GET_DOWNVOTES_POST_ID = gql`\r\n    query getDownvotes_PostID($id: ID!) {\r\n        post_upvote_downvote: getDownvotes_PostID(id: $id) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const GET_SECURITY_QUESTIONS_BY_AUTHOR_ID = gql`\r\n    query getSecurityQuestionsByAuthorID($id: ID!) {\r\n        security_questions: getSecurityQuestionsByAuthorID(id: $id) {\r\n            user_id\r\n            question\r\n        }\r\n    }\r\n`\r\n//MUTATIONS--------------------------------------------------------------------------------------------------------------------->\r\nexport const CREATE_POST = gql`\r\n    mutation createPost($post: PostInput!){\r\n        createPost(post: $post) {\r\n            author_id\r\n            title\r\n            type\r\n            image\r\n            text\r\n            active\r\n            community_id\r\n        }\r\n    }\r\n`\r\nexport const UPDATE_POST = gql`\r\n    mutation updatePost($post: UpdatePostInput!){\r\n        updatePost(post: $post) {\r\n            id\r\n            title\r\n            image\r\n            text\r\n            updated_at\r\n        }\r\n    }\r\n`\r\nexport const DELETE_POST = gql`\r\n    mutation deletePost($post: DeletePostInput!){\r\n        deletePost(post: $post) {\r\n            id\r\n        }\r\n    }\r\n`\r\nexport const LOCK_POST = gql`\r\nmutation lockPost($post: LockPostInput!){\r\n    lockPost(post: $post) {\r\n        id\r\n        active\r\n    }\r\n}\r\n`\r\nexport const CREATE_COMMENT = gql`\r\n    mutation createComment($comment: CommentInput!){\r\n        createComment(comment: $comment) {\r\n            post_id\r\n            author_id\r\n            parent_comment_id\r\n            comment\r\n        }\r\n    }\r\n`\r\nexport const UPDATE_COMMENT = gql`\r\n    mutation updateComment($comment: UpdateCommentInput!){\r\n        updateComment(comment: $comment) {\r\n            id\r\n            comment\r\n            updated_at\r\n        }\r\n    }\r\n`\r\nexport const DELETE_COMMENT = gql`\r\n    mutation deleteComment($comment: DeleteCommentInput!){\r\n        deleteComment(comment: $comment) {\r\n            id\r\n        }\r\n    }\r\n`\r\nexport const DELETE_PARENT_COMMENT = gql`\r\nmutation deleteParentComment($comment: DeleteCommentInput!){\r\n    deleteParentComment(comment: $comment) {\r\n        id\r\n    }\r\n}\r\n`\r\nexport const CREATE_COMMUNITY = gql`\r\nmutation createCommunity($communityUser: CommunityUserInput!){\r\n    createCommunity(communityUser: $communityUser) {\r\n        title\r\n        summary\r\n        user_id\r\n    }\r\n}\r\n`\r\nexport const UPDATE_COMMUNITY_USER_ROLE = gql`\r\n    mutation updateCommunityUserRole($communityuserrole: CommunityUserRoleInput!){\r\n        updateCommunityUserRole(communityuserrole: $communityuserrole) {\r\n            owner_id\r\n            owner_role_id\r\n            community_id\r\n            user_id\r\n            role_id\r\n        }\r\n    }\r\n`\r\nexport const UPDATE_COMMUNITY_DETAILS = gql`\r\n    mutation updateCommunityDetails($community: CommunityInput!){\r\n        updateCommunityDetails(community: $community) {\r\n            id\r\n            title\r\n            summary\r\n        }\r\n    }\r\n`\r\nexport const CREATE_USER_COMMUNITY_USER_ROLE = gql`\r\n    mutation createUser_CommunityUserRole($communityuserrole: CommunityUserRoleInput!){\r\n        createUser_CommunityUserRole(communityuserrole: $communityuserrole) {\r\n            community_id\r\n            user_id\r\n            role_id\r\n        }\r\n    }\r\n`\r\nexport const REMOVE_USER_COMMUNITY_USER_ROLE = gql`\r\n    mutation removeUser_CommunityUserRole($communityuserrole: CommunityUserRoleInput!){\r\n        removeUser_CommunityUserRole(communityuserrole: $communityuserrole) {\r\n            community_id\r\n            user_id\r\n            role_id\r\n        }\r\n    }\r\n`\r\nexport const BAN_USER = gql`\r\n    mutation banUser($communityban: CommunityBanInput!){\r\n        banUser(communityban: $communityban) {\r\n            community_id\r\n            user_id\r\n        }\r\n    }\r\n`\r\nexport const UNBAN_USER = gql`\r\n    mutation unbanUser($communityban: CommunityBanInput!){\r\n        unbanUser(communityban: $communityban) {\r\n            community_id\r\n            user_id\r\n        }\r\n    }\r\n`\r\nexport const REGISTER_USER = gql`\r\n    mutation registerUser($user: UserInput!){\r\n        registerUser(user: $user) {\r\n            email\r\n            username\r\n            password\r\n        }\r\n    }\r\n`\r\nexport const CHANGE_USER_INFO = gql`\r\n    mutation changeUserInfo($user: UserInput!) {\r\n        changeUserInfo(user: $user) {\r\n            id\r\n            email\r\n            username\r\n        }\r\n    }\r\n`\r\nexport const CHANGE_USER_PASSWORD = gql`\r\n    mutation changeUserPassword($user: UserInput!) {\r\n        changeUserPassword(user: $user) {\r\n            id\r\n            password\r\n        }\r\n    }\r\n`\r\nexport const SEND_MESSAGE = gql`\r\n    mutation sendMessage($message: MessageInput!) {\r\n        sendMessage(message: $message) {\r\n            sender_id\r\n            recipient_id\r\n            subject_line\r\n            message\r\n        }\r\n    }\r\n`\r\nexport const DELETE_MESSAGE = gql`\r\n    mutation deleteMessage($message: MessageInput!) {\r\n        deleteMessage(message: $message) {\r\n            id\r\n        }\r\n    }\r\n`\r\nexport const DELETE_MESSAGE_SENDER_RECIPIENT = gql`\r\n    mutation deleteMessage_sender_recipient($message: MessageInput!) {\r\n        deleteMessage_sender_recipient(message: $message) {\r\n            id\r\n            sender_delete\r\n            recipient_delete\r\n        }\r\n    }\r\n`\r\nexport const POST_UPVOTE = gql`\r\n    mutation postUpvote($post_upvote_downvote: Post_Upvote_Downvote_Input!) {\r\n        postUpvote(post_upvote_downvote: $post_upvote_downvote) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const POST_DOWNVOTE = gql`\r\n    mutation postDownvote($post_upvote_downvote: Post_Upvote_Downvote_Input!) {\r\n        postDownvote(post_upvote_downvote: $post_upvote_downvote) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const REMOVE_POST_UPVOTE = gql`\r\n    mutation removePostUpvote($post_upvote_downvote: Post_Upvote_Downvote_Input!) {\r\n        removePostUpvote(post_upvote_downvote: $post_upvote_downvote) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const REMOVE_POST_DOWNVOTE = gql`\r\n    mutation removePostDownvote($post_upvote_downvote: Post_Upvote_Downvote_Input!) {\r\n        removePostDownvote(post_upvote_downvote: $post_upvote_downvote) {\r\n            post_id\r\n            author_id\r\n        }\r\n    }\r\n`\r\nexport const CREATE_SECURITY_QUESTION = gql`\r\n    mutation createSecurityQuestion($securityQuestion: Security_Question_Input!) {\r\n        createSecurityQuestion(securityQuestion: $securityQuestion) {\r\n            user_id\r\n            question\r\n            answer\r\n        }\r\n    }\r\n`\r\nexport const UPDATE_SECURITY_QUESTION = gql`\r\n    mutation updateSecurityQuestion($securityQuestion: Security_Question_Input!) {\r\n        updateSecurityQuestion(securityQuestion: $securityQuestion) {\r\n            user_id\r\n            question\r\n            answer\r\n        }\r\n    }\r\n`\r\nexport const REMOVE_SECURITY_QUESTION = gql`\r\n    mutation removeSecurityQuestion($securityQuestion: Security_Question_Input!) {\r\n        removeSecurityQuestion(securityQuestion: $securityQuestion) {\r\n            user_id\r\n            question\r\n        }\r\n    }\r\n`\r\n/*\r\n    https://github.com/syntacticsolutions/react-blog-gql-backend/blob/master/schemas/posts/posts-schema.graphql\r\n    https://graphql.org/graphql-js/mutations-and-input-types/\r\n    http://knexjs.org/#Builder-insert\r\n    https://github.com/syntacticsolutions/react-blog-gql-backend/blob/master/api/posts/index.js\r\n    https://www.youtube.com/watch?v=L7kF4MXXCoA\r\n*/","import React from 'react'\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\nimport ArrowUpOutlined from '@ant-design/icons/ArrowUpOutlined'\r\nimport ArrowDownOutlined from '@ant-design/icons/ArrowDownOutlined'\r\n\r\nimport Message from 'antd/lib/message'\r\n\r\nimport { CHECK_POST_UPVOTE, CHECK_POST_DOWNVOTE, POST_UPVOTE, POST_DOWNVOTE, REMOVE_POST_UPVOTE, REMOVE_POST_DOWNVOTE } from '../../../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nasync function OnFinish_CheckPost_Upvote_Downvote(check, mutation, refetch, author_id, post_id) {\r\n    await check({\r\n        variables: {\r\n            post_id: post_id,\r\n            author_id: author_id\r\n        }\r\n    })\r\n    await mutation({\r\n        variables: {\r\n            post_upvote_downvote: {\r\n                post_id: post_id,\r\n                author_id: author_id\r\n            }\r\n        }\r\n    })\r\n    refetch()\r\n}\r\n\r\nasync function OnFinish_Remove(removeMutation, refetch, author_id, post_id) {\r\n    await removeMutation({\r\n        variables: {\r\n            post_upvote_downvote: {\r\n                post_id: post_id,\r\n                author_id: author_id\r\n            }\r\n        }\r\n    })\r\n    refetch()\r\n}\r\n\r\nasync function OnFinish(upvote_downvote_mutation, refetch, author_id, post_id) {\r\n    await upvote_downvote_mutation({\r\n        variables: {\r\n            post_upvote_downvote: {\r\n                post_id: post_id,\r\n                author_id: author_id\r\n            }\r\n        }\r\n    })\r\n    refetch()\r\n}\r\n\r\nconst Post_Like_Dislike = ({ post, refetch }) => {\r\n    const [postUpVote] = useMutation(POST_UPVOTE)//Like for post\r\n    const [removePostUpvote] = useMutation(REMOVE_POST_UPVOTE)\r\n    const [checkPostDownvote] = useLazyQuery(CHECK_POST_DOWNVOTE)\r\n\r\n    const [postDownVote] = useMutation(POST_DOWNVOTE)//Dislike for post\r\n    const [removePostDownvote] = useMutation(REMOVE_POST_DOWNVOTE)\r\n    const [checkPostUpvote] = useLazyQuery(CHECK_POST_UPVOTE)\r\n\r\n    const [cookies] = useCookies(['userCookie'])\r\n    //If user is not logged in \r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <div className='like_dislike'>\r\n                <span>\r\n                    <ArrowUpOutlined onClick={() => \r\n                        Message.warning({\r\n                            content: \"Login to like post\",\r\n                            style: {\r\n                                marginTop: '10vh',\r\n                            },\r\n                        }, 10)}\r\n                    />\r\n                </span>\r\n                <span>{post.post_upvotes.length - post.post_downvotes.length}</span>\r\n                <span>\r\n                    <ArrowDownOutlined onClick={() => \r\n                        Message.warning({\r\n                            content: \"Login to dislike post\",\r\n                            style: {\r\n                                marginTop: '10vh',\r\n                            },\r\n                        }, 10)}\r\n                     />\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (post.post_upvotes.find((item) => item.author_id === cookies.userCookie.id)) {\r\n        return(\r\n            <div className='like_dislike'>\r\n                <span>\r\n                    <ArrowUpOutlined\r\n                        style={{ \r\n                            color: '#065fd4'\r\n                        }} \r\n                        onClick={() => {\r\n                            OnFinish_Remove(removePostUpvote, refetch, cookies.userCookie.id, post.id)\r\n                        }}\r\n                    />\r\n                </span>\r\n                <span>\r\n                    {post.post_upvotes.length - post.post_downvotes.length}\r\n                </span>\r\n                <span>\r\n                    <ArrowDownOutlined onClick={() => OnFinish_CheckPost_Upvote_Downvote(checkPostUpvote, postDownVote, refetch, cookies.userCookie.id, post.id)}/>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (post.post_downvotes.find((item) => item.author_id === cookies.userCookie.id)) {\r\n        return(\r\n            <div className='like_dislike'>\r\n                <span>\r\n                    <ArrowUpOutlined onClick={() => OnFinish_CheckPost_Upvote_Downvote(checkPostDownvote, postUpVote, refetch, cookies.userCookie.id, post.id)}/>\r\n                </span>\r\n                <span>\r\n                    {post.post_upvotes.length - post.post_downvotes.length}\r\n                </span>\r\n                <span>\r\n                    <ArrowDownOutlined\r\n                        style={{ \r\n                            color: '#065fd4'\r\n                        }} \r\n                        onClick={() => {\r\n                            OnFinish_Remove(removePostDownvote, refetch, cookies.userCookie.id, post.id)\r\n                        }}\r\n                    />\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='like_dislike'>\r\n            <span>\r\n                <ArrowUpOutlined onClick={() => OnFinish(postUpVote, refetch, cookies.userCookie.id, post.id)}/>\r\n            </span>\r\n            <span>\r\n                {post.post_upvotes.length - post.post_downvotes.length}\r\n            </span>\r\n            <span>\r\n                <ArrowDownOutlined onClick={() => OnFinish(postDownVote, refetch, cookies.userCookie.id, post.id)}/>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post_Like_Dislike","import { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Typography from 'antd/lib/typography'\r\nimport MessageOutlined from '@ant-design/icons/MessageOutlined'\r\n\r\nimport Post_Like_Dislike from './Post_Like_Dislike'\r\n\r\nimport moment from 'moment'\r\nconst { Text } = Typography\r\n\r\nconst Title = ({ item }) => {\r\n    return (\r\n        <div>\r\n            <Link to={'/community/' + item.community.id}>{item.community.title}</Link>\r\n            {<Text type='secondary'>{' Posted by '} <Link to={'/user/' + item.user.id}>{item.user.username}</Link> {' '}</Text>}\r\n            {\r\n                <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                    {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                </Tooltip>\r\n            }\r\n            <br />\r\n            <span>\r\n                <b>{item.title}</b>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Formats the post depending on which type it is\r\nconst ContentCard = ({ item, refetch }) => {\r\n    switch (item.type) {\r\n        case 'Post':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={item} refetch={refetch}/>\r\n                    <Card\r\n                        key={item.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={item}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <p style={{ whiteSpace: 'pre-line' }}>{item.text}</p>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={item} refetch={refetch}/>\r\n                    <Card\r\n                        key={item.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={item}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <a style={{ wordWrap: 'break-word' }} href={\"http://\" + `${item.text}`}>{item.text}</a>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        case 'Image':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={item} refetch={refetch}/>\r\n                    <Card\r\n                        key={item.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={item}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <img alt=\"\" src={item.image} style={{ maxWidth: \"100%\" }} />\r\n                    </Card>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default ContentCard","import React from 'react'\r\nimport List from 'antd/lib/list'\r\n\r\nimport ContentCard from '../component/ContentCard'\r\n\r\n//Exports a list of cards with posts in the cards\r\nconst Post = ({ post, postQueryRefetch }) => {\r\n    return (\r\n        <div>\r\n            <List\r\n                itemLayout=\"vertical\"\r\n                size=\"large\"\r\n                className=\"post-list\"\r\n                pagination={{\r\n                    position: 'bottom',\r\n                    pageSize: 10\r\n                }}\r\n                dataSource={post}\r\n                renderItem={item => (\r\n                    <ContentCard item={item} refetch={postQueryRefetch}/>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n//<h3 style={{ marginTop: \"10px\", marginLeft: \"10px\" }}>Recent Posts</h3>\r\n//https://stackoverflow.com/questions/53843548/pagination-and-card-components-with-ant-design-antd\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Input from 'antd/lib/input'\r\nimport Menu from 'antd/lib/menu'\r\nimport PictureTwoTone from '@ant-design/icons/PictureTwoTone'\r\nimport LinkOutlined from '@ant-design/icons/LinkOutlined'\r\n\r\n\r\nexport default function CreatePostNav() {\r\n    let history = useHistory()\r\n    const createpost = (item) => history.push({\r\n        pathname: '/createpost',\r\n        state: {\r\n            item\r\n        }\r\n    })\r\n    return (\r\n        <div className=\"create-post-nav\">\r\n            <Menu mode=\"horizontal\">\r\n                <Menu.Item key=\"Post\" onClick={() => {createpost(\"Post\")}} className=\"MenuItemPost\" icon={<Input placeholder=\"Create Post\"/>}  />\r\n                <Menu.Item key=\"Image\" onClick={() => {createpost(\"Image\")}} className=\"MenuItemImage\" icon={<PictureTwoTone style={{ fontSize: '1.5em'}} />}/>\r\n                <Menu.Item key=\"Link\" onClick={() => {createpost(\"Link\")}} className=\"MenuItemLink\" icon={<LinkOutlined style={{ fontSize: '1.5em'}}/>} />\r\n            </Menu>\r\n        </div>\r\n    )\r\n}","import { Link } from 'react-router-dom'\r\nimport Card from 'antd/lib/card'\r\n\r\nconst Directory = ({ }) => {\r\n    return (\r\n        <Card className='directory' title='Directory'>\r\n            <div className='column'>\r\n                <Link to='/' className='link'>Home</Link>\r\n                <br style={{ marginBottom: '0.5em'  }}/>\r\n                <Link to='/account' className='link'>Account</Link>\r\n                <br style={{ marginBottom: '0.5em'  }}/>\r\n                <Link to='/inbox' className='link'>Inbox</Link>\r\n            </div>\r\n            <div className='column'>\r\n                <Link to='/createpost' className='link'>Create Post</Link>\r\n                <br style={{ marginBottom: '0.5em'  }}/>\r\n                <Link to='/communities' className='link'>Community</Link>\r\n                <br style={{ marginBottom: '0.5em'  }}/>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Directory","//Checks if type is object\r\nexport function isLiteralObject(a) {\r\n    return (!!a) && (a.constructor === Object);\r\n}","import { useQuery } from '@apollo/react-hooks'\r\n\r\n//Function to grab graphql data from SQL, If an ID is passed\r\nexport function GetGraphqlQueryID(param, query) {\r\n    const { data, error, loading } = useQuery(query, {\r\n        variables: {\r\n            id: param\r\n        }\r\n    })\r\n\r\n    if (loading) {\r\n        return 'loading'\r\n    }\r\n    if (error) {\r\n        return 'error'\r\n    }\r\n    return data\r\n}\r\n//Function to grab graphql data from SQL, If an ID is NOT passed\r\nexport function GetGraphqlQuery(query) {\r\n    const { data, error, loading } = useQuery(query)\r\n\r\n    if (loading) {\r\n        return 'loading'\r\n    }\r\n    if (error) {\r\n        return 'error'\r\n    }\r\n    return data\r\n}\r\n\r\nexport function GetGraphqlQueryID_Refetch(param, query) {\r\n    const { data, error, loading, refetch } = useQuery(query, {\r\n        variables: {\r\n            id: param\r\n        }\r\n    })\r\n\r\n    if (loading) {\r\n        return 'loading'\r\n    }\r\n    if (error) {\r\n        return 'error'\r\n    }\r\n    return [data, refetch]\r\n}\r\n\r\nexport function GetGraphqlQuery_Refetch(query) {\r\n    const { data, error, loading, refetch } = useQuery(query)\r\n\r\n    if (loading) {\r\n        return 'loading'\r\n    }\r\n    if (error) {\r\n        return 'error'\r\n    }\r\n    return [data, refetch]\r\n}\r\n\r\n//https://www.apollographql.com/docs/react/data/error-handling/","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport List from 'antd/lib/list'\r\n\r\nimport Post from '../components/commons/home-post/index'\r\nimport CreatePostNav from '../components/commons/navigation/create-post-nav'\r\nimport Directory from '../components/commons/navigation/directory'\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQuery, GetGraphqlQuery_Refetch } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_POSTS_RECENT, GET_ALL_COMMUNITIES } from '../queries/posts'\r\n\r\nexport default function Home() {\r\n    let [postQuery, postQueryRefetch] = GetGraphqlQuery_Refetch(GET_POSTS_RECENT)\r\n    let communityQuery = GetGraphqlQuery(GET_ALL_COMMUNITIES)\r\n\r\n    if (!isLiteralObject(communityQuery)) {\r\n        return (\r\n            <main className=\"home\">\r\n                <h3><b>Home Page</b></h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n    if (!isLiteralObject(postQuery)) {\r\n        return (\r\n            <main className=\"home\">\r\n                <h3><b>Home Page</b></h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"home\">\r\n            <section className=\"container\">\r\n                <div className=\"row\">\r\n                    <h3><b>Home Page</b></h3>\r\n                    <div className=\"masonry-card-grid\">\r\n                        <div className=\"nested-section\">\r\n                            <section className=\"create-post\">\r\n                                <CreatePostNav />\r\n                            </section>\r\n                            <section className=\"post-card\">\r\n                                <Post post={postQuery.post} postQueryRefetch={postQueryRefetch}/>\r\n                            </section>\r\n                        </div>\r\n                        <div className=\"community-card\">\r\n                            <Card title='Communities'>\r\n                                <List\r\n                                    itemLayout=\"vertical\"\r\n                                    size=\"small\"\r\n                                    className=\"community-list\"\r\n                                    pagination={{\r\n                                        position: 'bottom',\r\n                                        pageSize: 10\r\n                                    }}\r\n                                    dataSource={communityQuery.community}\r\n                                    renderItem={item => (\r\n                                        <List.Item key={item.id}>\r\n                                            <div><Link to={\"/community/\" + item.id}>{item.title}</Link></div>\r\n                                        </List.Item>\r\n                                    )}\r\n                                />\r\n                            </Card>\r\n                            <Directory />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Modal from 'antd/lib/modal'\r\nimport Message from 'antd/lib/message'\r\nimport Card from 'antd/lib/card'\r\nimport EditOutlined from '@ant-design/icons/EditOutlined'\r\nimport UserDeleteOutlined from '@ant-design/icons/UserDeleteOutlined'\r\nimport UserAddOutlined from '@ant-design/icons/UserAddOutlined'\r\n\r\nconst { confirm } = Modal\r\n\r\n//Exports a List of cards containing communities to the community post page\r\nconst AboutCommunity = ({ query, pageID, userID, JoinCommunity, joinMutation, LeaveCommunity, leaveMutation, refetch }) => {\r\n    const communityuserrole = query.communityuserrole.find(item => item.user_id === userID)\r\n    const communityBan = query.communityban.find(item => item.user_id === userID)\r\n    const JoinCommunityConfirm = () => {\r\n        confirm({\r\n            title: 'Join Community - ' + query.title,\r\n            content: 'Are you sure you want to join this community?',\r\n            okText: 'Confirm',\r\n            onOk() {\r\n                JoinCommunity(pageID, userID, joinMutation)\r\n                Message.success({\r\n                    content: 'You have successfully joined ' + query.title,\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 10)\r\n                refetch()\r\n            },\r\n            width: '125vh'\r\n        })\r\n    }\r\n    const LeaveCommunityConfirm = (communityuserrole, refetch) => {\r\n        confirm({\r\n            title: 'Leave Community - ' + query.title,\r\n            content: 'Are you sure you want to leave this community?',\r\n            okText: 'Confirm',\r\n            onOk() {\r\n                LeaveCommunity(communityuserrole, leaveMutation)\r\n                Message.success({\r\n                    content: 'You have successfully left ' + query.title,\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 10)\r\n                refetch()\r\n            },\r\n            width: '125vh'\r\n        })\r\n    }\r\n    return (\r\n        <Card\r\n            title=\"Description\"\r\n            className=\"description\"\r\n            extra={\r\n                ((communityuserrole === undefined) ? false : communityuserrole.user_id === userID && communityuserrole.role_id === 1) ?\r\n                    <span className=\"edit-delete\">\r\n                        <Link to={`/editcommunity/${pageID}`} className=\"edit\">\r\n                            <EditOutlined key=\"edit\" />\r\n                        </Link>\r\n                    </span>\r\n                    :\r\n                    ((communityuserrole === undefined) ? false : communityuserrole.user_id === userID && communityuserrole.role_id === 2) ?\r\n                        <span className=\"edit-delete\">\r\n                            <Link to={`/editcommunity/${pageID}`} className=\"edit\" style={{paddingRight: '5px'}}>\r\n                                <EditOutlined key=\"edit\" />\r\n                            </Link>\r\n                            <UserDeleteOutlined type=\"primary\" onClick={() => { LeaveCommunityConfirm(communityuserrole, refetch) }}/>\r\n                        </span>\r\n                    :\r\n                        ((communityuserrole === undefined) ? false : communityuserrole.user_id === userID && communityuserrole.role_id === 3) ?\r\n                            <UserDeleteOutlined type=\"primary\" onClick={() => { LeaveCommunityConfirm(communityuserrole, refetch) }}/>\r\n                            :\r\n                            (communityBan !== undefined) ?\r\n                                <UserAddOutlined type=\"primary\" onClick={() => {\r\n                                    Message.error({\r\n                                        content: 'You were banned from this community. Message an admin to lift ban.',\r\n                                        style: { marginTop: '5vh' }\r\n                                    }, 10)\r\n                                }}/>\r\n                                :\r\n                                (userID !== null) ?\r\n                                    <UserAddOutlined type=\"primary\" onClick={() => { JoinCommunityConfirm(query.public, refetch) }}/>\r\n                                    :\r\n                                    null\r\n            }\r\n        >\r\n            <p>{query.summary}</p>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default AboutCommunity","import { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Typography from 'antd/lib/typography'\r\nimport MessageOutlined from '@ant-design/icons/MessageOutlined'\r\n\r\nimport Post_Like_Dislike from './Post_Like_Dislike'\r\n\r\nimport moment from 'moment'\r\nconst { Text } = Typography\r\n\r\nconst Title = ({ item }) => {\r\n    return (\r\n        <div>\r\n            {<Text type='secondary'>{' Posted by '} <Link to={'/user/' + item.user.id}>{item.user.username}</Link> {' '}</Text>}\r\n            {\r\n                <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                    {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                </Tooltip>\r\n            }\r\n            <br />\r\n            <span>\r\n                <b>{item.title}</b>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Formats the post depending on which type it is\r\nconst ContentCard = ({post, refetch}) => {\r\n    switch (post.type) {\r\n        case 'Image':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={post} refetch={refetch}/>\r\n                    <Card\r\n                        key={post.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={post}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + post.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <img alt=\"\" src={post.image} style={{ maxWidth: \"100%\" }} />\r\n                    </Card>\r\n                </div>\r\n            )\r\n        case 'Post':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={post} refetch={refetch}/>\r\n                    <Card\r\n                        key={post.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={post}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + post.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <p style={{ whiteSpace: 'pre-line' }}>{post.text}</p>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <div className='container'>\r\n                    <Post_Like_Dislike post={post} refetch={refetch}/>\r\n                    <Card\r\n                        key={post.id}\r\n                        className=\"content\"\r\n                        type=\"inner\"\r\n                        title={<Title item={post}/>}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + post.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <a style={{ wordWrap: 'break-word' }} href={\"http://\" + `${post.text}`}>{post.text}</a>\r\n                    </Card>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default ContentCard","import React from 'react'\r\nimport List from 'antd/lib/list'\r\n\r\nimport ContentCard from '../component/ContentCard_Community-Post'\r\n\r\nconst CommunityPost_Post = ({ query, refetch }) => {\r\n    return (\r\n        <List \r\n            itemLayout=\"vertical\" \r\n            size=\"large\" \r\n            className=\"post-list\" \r\n            pagination={{\r\n                position: 'bottom',\r\n                pageSize: 10\r\n            }}\r\n            dataSource={query.community.post}\r\n            renderItem={post => (\r\n                <ContentCard post={post} refetch={refetch}/>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n//Exports a list of cards with posts in the cards for the page Community Post\r\nexport default CommunityPost_Post\r\n","export async function JoinCommunity(pageID, userID, mutation) {//Inputs users into a community with a role of 3 which is base user\r\n    const communityuserrole = {\r\n        community_id: parseInt(pageID),\r\n        user_id: userID,\r\n        role_id: 3\r\n    }\r\n    await mutation({\r\n        variables: {\r\n            communityuserrole\r\n        }\r\n    })\r\n}\r\n\r\nexport async function LeaveCommunity(obj, mutation) {//Remove users from community\r\n    const communityuserrole = {\r\n        community_id: obj.community_id,\r\n        user_id: obj.user_id,\r\n        role_id: obj.role_id\r\n    }\r\n    await mutation({\r\n        variables: {\r\n            communityuserrole\r\n        }\r\n    })\r\n}","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport About from '../components/commons/community-post/community-post_about'\r\nimport CreatePostNav from '../components/commons/navigation/create-post-nav'\r\nimport CommunityPost_Post from '../components/commons/community-post/community-post_post'\r\n\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQueryID_Refetch } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_COMMUNITY_POSTS_USER, CREATE_USER_COMMUNITY_USER_ROLE, REMOVE_USER_COMMUNITY_USER_ROLE } from '../queries/posts'\r\nimport { JoinCommunity, LeaveCommunity } from '../components/commons/community-post/functions/community-post_join_leave_community'\r\n\r\nimport { useCookies } from 'react-cookie'\r\n\r\n//Forum Posts and Community Components for Community Page\r\nexport default function CommunityPost() {\r\n    let { id } = useParams()\r\n    let [query, refetch] = GetGraphqlQueryID_Refetch(id, GET_COMMUNITY_POSTS_USER)\r\n    const [createUser_CommunityUserRole] = useMutation(CREATE_USER_COMMUNITY_USER_ROLE)\r\n    const [removeUser_CommunityUserRole] = useMutation(REMOVE_USER_COMMUNITY_USER_ROLE)\r\n    const [cookies] = useCookies(['userCookie'])\r\n\r\n    //If query from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"communitypost\">\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"communitypost\">\r\n            <section className=\"container\">\r\n                <div className=\"row\">\r\n                    <h3 className=\"page-title\"><b>{query.community.title}</b></h3>\r\n                    <div className=\"masonry-card-grid\">\r\n                        <div className=\"nested-section\">\r\n                            <section className=\"create-post-nav\">\r\n                                <CreatePostNav />\r\n                            </section>\r\n                            <section className=\"post-card\">\r\n                                <CommunityPost_Post query={query} refetch={refetch}/>\r\n                            </section>\r\n                        </div>\r\n                        <div className=\"about-card\">\r\n                            <About\r\n                                query={query.community}\r\n                                pageID={id}\r\n                                userID={(cookies.userCookie !== undefined) ? cookies.userCookie.id : null}\r\n                                JoinCommunity={JoinCommunity}\r\n                                joinMutation={createUser_CommunityUserRole}\r\n                                LeaveCommunity={LeaveCommunity}\r\n                                leaveMutation={removeUser_CommunityUserRole}\r\n                                refetch={refetch}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n//Resources\r\n//https://stackoverflow.com/questions/40752287/use-moment-js-to-convert-unix-epoch-time-to-human-readable-time/40752362","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport List from 'antd/lib/list'\r\nimport Card from 'antd/lib/card'\r\nimport Input from 'antd/lib/input/Input'\r\nimport Button from 'antd/lib/button'\r\nimport Message from 'antd/lib/message'\r\n\r\nimport { useCookies } from 'react-cookie'\r\n\r\n//https://stackoverflow.com/questions/8217419/how-to-determine-if-javascript-array-contains-an-object-with-an-attribute-that-e\r\n//https://stackoverflow.com/questions/16607557/perform-join-on-value-in-array-of-objects\r\n\r\n//Side Navigation for Community Page\r\n//Shows and hides Community\r\n\r\nconst CommunityHome = ({ item, setHovered }) => {\r\n    const [searchParam, setSearch] = useState('')\r\n    const [cookies] = useCookies(['userCookie'])\r\n\r\n    return (\r\n        <div className=\"card-grid\">\r\n            <div className=\"communities-list\">\r\n                <Card title=\"Community\" extra={(cookies.userCookie == undefined) ? null : <Link to={\"/createcommunity\"}> Create a community</Link>}>\r\n                    <List\r\n                        header={<Input className=\"search\" placeholder=\"Search Community by Name\" onChange={(e) => { setSearch(e.target.value) }} />}\r\n                        itemLayout=\"vertical\"\r\n                        size=\"large\"\r\n                        className=\"community-list\"\r\n                        pagination={{\r\n                            position: 'bottom',\r\n                            pageSize: 10\r\n                        }}\r\n                        dataSource={item}\r\n                        renderItem={item => (\r\n                            ((item.title.toLowerCase()).includes(searchParam.toLowerCase())) ?\r\n                            <List.Item key={item.id}>\r\n                                <Link to={\"/community/\" + item.id} onMouseEnter={() => setHovered({ title: item.title, summary: item.summary})}>{item.title}</Link>\r\n                            </List.Item>\r\n                            :\r\n                            null\r\n                        )}\r\n                    >\r\n                    </List>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CommunityHome","import Card from 'antd/lib/card'\r\n\r\nconst CommunityDetail = ({community}) => {\r\n    if(community === null) {\r\n        return (\r\n            <Card className='community-details' title='List of Communities'>\r\n                Hover over the community's name to see the summary\r\n            </Card>\r\n        )\r\n    }\r\n    return (\r\n        <Card className='community-details'>\r\n            <h3>{community.title}</h3>\r\n            <p>{community.summary}</p>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CommunityDetail","import React, { useState } from 'react'\r\nimport CommunityHome from '../components/commons/community-home/community-home'\r\nimport CommunityDetail from '../components/commons/community-home/hover-communitydetail'\r\nimport Directory from '../components/commons/navigation/directory'\r\n\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQuery } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_ALL_COMMUNITIES } from '../queries/posts'\r\n\r\nexport default function Community() {\r\n    const [hoveredCommunity, setHovered] = useState(null)\r\n    let query = GetGraphqlQuery(GET_ALL_COMMUNITIES)\r\n\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"communities\">\r\n                <h3><b>Community Home Page</b></h3>\r\n                <p style={{ textAlign: 'center' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"communities\">\r\n            <h3><b>Community Home Page</b></h3>\r\n            <span className='nested-section' onMouseLeave={() => setHovered(null)}>\r\n                <CommunityHome item={query.community} setHovered={setHovered}/>\r\n                <div className='description-directory'>\r\n                    <CommunityDetail community={hoveredCommunity}/>\r\n                    <Directory />\r\n                </div>\r\n            </span>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport Menu from 'antd/lib/menu'\r\nimport Modal from 'antd/lib/modal'\r\nimport Message from 'antd/lib/message'\r\n\r\nconst { confirm } = Modal\r\n\r\nfunction confirmUpdateRole(communityuserrole, username, role_id, role_title, mutation, refetch){\r\n    confirm({\r\n        title: 'Update Role',\r\n        content: (role_id === 1) ? \"Are you sure you want to hand ownership of this community to this person? You will become an Admin.\" : \"Are you sure you want to change \" + username + \"'s role to \" + role_title,\r\n        onOk() {\r\n            changeRole(communityuserrole, role_id, mutation, refetch)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\nasync function changeRole(object, role_id, mutation, refetch){\r\n    let communityuserrole = {\r\n        ...object,\r\n        role_id: role_id\r\n    }\r\n    //Mutation Hook\r\n    await mutation({\r\n        variables: { communityuserrole }\r\n    }) \r\n    Message.success({\r\n        content: \"You have successfully updated a user's role.\",\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n    refetch()\r\n}\r\n\r\nconst EditCommunityDropDown = ({ role_title, key, communityuserrole, username, mutation, refetch }) => {\r\n    if (role_title === \"Owner\") {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key={key} onClick={() => confirmUpdateRole(communityuserrole, username, 1, \"Owner\", mutation, refetch)}>\r\n                    Owner\r\n                </Menu.Item>\r\n                \r\n                <Menu.Item key={key} onClick={() => confirmUpdateRole(communityuserrole, username, 2, \"Admin\", mutation, refetch)}>\r\n                    Admin\r\n                </Menu.Item>\r\n                \r\n                <Menu.Item key={key} onClick={() => confirmUpdateRole(communityuserrole, username, 3, \"User\", mutation, refetch)}>\r\n                    User\r\n                </Menu.Item>\r\n            </Menu>\r\n        )\r\n    }\r\n    if (role_title === \"Admin\") {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key={key} onClick={() => confirmUpdateRole(communityuserrole, username, 2, \"Admin\", mutation, refetch)}>\r\n                    <div>Admin</div>\r\n                </Menu.Item>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditCommunityDropDown","import Modal from 'antd/lib/modal'\r\nimport Message from 'antd/lib/message'\r\nconst { confirm } = Modal\r\n\r\n//Modal to confirm removing a user from community\r\nfunction confirmRemoveUser(id, user_id, role_id, mutation, refetch) {\r\n    confirm({\r\n        title: 'Remove User',\r\n        content: \"Are you sure you want to remove this person from the community?\",\r\n        onOk() {\r\n            removeUser(id, user_id, role_id, mutation, refetch)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\n//Function to handle the apollo graphql mutation of remove a user from the community\r\nasync function removeUser(id, user_id, role_id, mutation, refetch) {\r\n    const communityuserrole = {\r\n        community_id: id,\r\n        user_id: user_id,\r\n        role_id: role_id\r\n    }\r\n    await mutation({\r\n        variables: { communityuserrole }\r\n    })\r\n    Message.success({\r\n        content: \"You have successfully removed a user from this community.\",\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n    refetch()\r\n}\r\n\r\n//Modal to confirm removing a user from community\r\nfunction confirmBanUser(id, user_id, mutation, refetch) {\r\n    confirm({\r\n        title: 'Ban User',\r\n        content: \"Are you sure you want to ban this person from the community?\",\r\n        onOk() {\r\n            ban_user(id, user_id, mutation, refetch)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\n//Function to handle the apollo graphql mutation of ban a user from the community\r\nasync function ban_user(id, user_id, mutation, refetch) {\r\n    const communityban = {\r\n        community_id: id,\r\n        user_id: user_id\r\n    }\r\n    await mutation({\r\n        variables: { communityban }\r\n    })\r\n    Message.success({\r\n        content: \"You have successfully banned a user from this community.\",\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n    refetch()\r\n}\r\n\r\n//Function to handle apollo graphql to update community details\r\nasync function updateDetails(values, id, mutation, refetch, setTab) {\r\n    const community = {\r\n        id: parseInt(id),\r\n        title: values.title,\r\n        summary: values.description\r\n    }\r\n    await mutation({\r\n        variables: { community }\r\n    })\r\n    Message.success({\r\n        content: 'You have successfully updated details of the community.',\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n    setTab(\"2\")\r\n    refetch()\r\n}\r\n\r\n//Modal to confirm removing a user from community\r\nfunction confirmUnbanUser(id, user_id, mutation, refetch) {\r\n    confirm({\r\n        title: 'Unban User',\r\n        content: \"Are you sure you want to unban this person from the community?\",\r\n        onOk() {\r\n            unban_user(id, user_id, mutation, refetch)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\n//Function to handle the apollo graphql mutation of ban a user from the community\r\nasync function unban_user(id, user_id, mutation, refetch) {\r\n    const communityban = {\r\n        community_id: id,\r\n        user_id: user_id\r\n    }\r\n    await mutation({\r\n        variables: { communityban }\r\n    })\r\n    Message.success({\r\n        content: \"You have successfully banned a user from this community.\",\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n    refetch()\r\n}\r\n\r\nexport { confirmRemoveUser, confirmBanUser, updateDetails, confirmUnbanUser }","import React, { useEffect, useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\n\r\nimport Tabs from 'antd/lib/tabs'\r\nimport Card from 'antd/lib/card'\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Search from 'antd/lib/input/Search'\r\nimport Dropdown from 'antd/lib/dropdown'\r\nimport List from 'antd/lib/list'\r\nimport Descriptions from 'antd/lib/descriptions'\r\n\r\nimport DownOutlined from '@ant-design/icons/DownOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\nimport StopOutlined from '@ant-design/icons/StopOutlined'\r\n\r\nimport EditCommunityDropDown from '../components/commons/edit-community/EditCommunityDropDown'\r\nimport { confirmRemoveUser, confirmBanUser, updateDetails, confirmUnbanUser } from '../components/commons/edit-community/functions/mutation'\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQueryID_Refetch } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_COMMUNITY_USER, UPDATE_COMMUNITY_USER_ROLE, UPDATE_COMMUNITY_DETAILS, REMOVE_USER_COMMUNITY_USER_ROLE, BAN_USER, UNBAN_USER } from '../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport default function EditCommunity() {\r\n    let { id } = useParams()\r\n    let [query, refetch] = GetGraphqlQueryID_Refetch(id, GET_COMMUNITY_USER)\r\n    \r\n    const [currentTab, setTab] = useState(\"1\")\r\n    const [searchParam, setSearch] = useState('')\r\n    const [updateRole] = useMutation(UPDATE_COMMUNITY_USER_ROLE)\r\n    const [removeUserCommunityUserRole] = useMutation(REMOVE_USER_COMMUNITY_USER_ROLE)\r\n    const [updateCommunityDetails] = useMutation(UPDATE_COMMUNITY_DETAILS)\r\n    const [banUser] = useMutation(BAN_USER) \r\n    const [unbanUser] = useMutation(UNBAN_USER) \r\n    \r\n    const [cookies] = useCookies(['userCookie'])\r\n    let currentUser = (query.community === undefined) ? null : query.community.communityuserrole.find(element => element.user_id === cookies.userCookie.id)\r\n    let communityuserrole\r\n\r\n    //If user is not logged in return a page with error\r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <Redirect to=\"/error\" />\r\n        )\r\n    }\r\n\r\n    //If query from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"editcommunity\">\r\n                <h3>Edit Community</h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        updateDetails(values, id, updateCommunityDetails, refetch, setTab)\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <main className=\"editcommunity\">\r\n            <h3>Edit Community</h3>\r\n            <Card className=\"card-tab\">\r\n                <Tabs type=\"card\" className=\"tab\" defaultActiveKey={currentTab}>\r\n                    <TabPane tab=\"Edit Users in Community\" key=\"1\">\r\n                        <Search className=\"search-bar\" placeholder=\"Search Users\" onChange={handleChange} className='search-bar'/>\r\n                        <List\r\n                            itemLayout=\"vertical\"\r\n                            size=\"large\"\r\n                            dataSource={query.community.communityuserrole}\r\n                            renderItem={item => (\r\n                                (item.user.username.toLowerCase()).includes(searchParam.toLowerCase()) ?\r\n                                    <List.Item key={item.user_id}>\r\n                                        <Descriptions\r\n                                            title={item.user.username} \r\n                                            className='user-info'\r\n                                            extra={\r\n                                                (currentUser.user_id === item.user_id || currentUser.role_id >= item.role_id) ? \r\n                                                    // returns null if current user is the same person or same/higher permissions, so you can't delete yourself or anybody higher than you\r\n                                                    null\r\n                                                    :\r\n                                                    <span>\r\n                                                        <StopOutlined onClick={() => confirmBanUser(item.community_id, item.user_id, banUser, refetch)} style={{marginRight: '10px'}}/>\r\n                                                        <DeleteOutlined onClick={() => confirmRemoveUser(item.community_id, item.user_id, item.role_id, removeUserCommunityUserRole, refetch)}/>\r\n                                                    </span>\r\n                                            }\r\n                                        >\r\n                                            <Descriptions.Item label=\"Email\">{item.user.email}</Descriptions.Item>\r\n                                            <Descriptions.Item label=\"Current Role\">{item.role.title}</Descriptions.Item>\r\n                                            {\r\n                                                (cookies.userCookie.id === item.user_id) ? \r\n                                                    //Description describing current user\r\n                                                    null\r\n                                                : (currentUser.role.title !== 'Owner' && (item.role.title === \"Admin\" || item.role.title === \"Owner\")) ?\r\n                                                    //Current User is not the owner and account is either admin or owner to prevent admins changing admin/owner role\r\n                                                    null\r\n                                                :\r\n                                                <Descriptions.Item label=\"Edit Role\">\r\n                                                    <Dropdown overlay={\r\n                                                        <EditCommunityDropDown\r\n                                                            role_title={currentUser.role.title}\r\n                                                            key={item.user_id + item.role_id}\r\n                                                            communityuserrole={\r\n                                                                communityuserrole = {\r\n                                                                    owner_id: currentUser.user_id,\r\n                                                                    owner_role_id: currentUser.role_id,\r\n                                                                    community_id: parseInt(id),\r\n                                                                    user_id: item.user.id\r\n                                                                }\r\n                                                            }\r\n                                                            username={item.user.username}\r\n                                                            mutation={updateRole}\r\n                                                            refetch={refetch}\r\n                                                        />\r\n                                                    }>\r\n                                                        <a> {item.role.title} <DownOutlined /></a>\r\n                                                    </Dropdown>\r\n                                                </Descriptions.Item>\r\n                                            }\r\n                                        </Descriptions>\r\n                                    </List.Item>\r\n                                :\r\n                                    null\r\n                            )}\r\n                        />\r\n                    </TabPane>\r\n\r\n                    <TabPane tab=\"Edit Community Details\" key=\"2\">\r\n                        <Form\r\n                            className=\"community-form\"\r\n                            labelCol={{ span: 4 }}\r\n                            wrapperCol={{ span: 16 }}\r\n                            name=\"basic\"\r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                                initialValue={query.community.title}\r\n                            >\r\n                                <Input className=\"title\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item\r\n                                label=\"Description\"\r\n                                name=\"description\"\r\n                                initialValue={query.community.summary}\r\n                            >\r\n                                <Input.TextArea className=\"description\" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item wrapperCol={{ offset: 4, span: 16 }}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </TabPane>\r\n\r\n                    <TabPane tab=\"Community Bans\" key=\"3\">\r\n                        <List\r\n                            itemLayout=\"vertical\"\r\n                            size=\"large\"\r\n                            dataSource={query.community.communityban}\r\n                            renderItem={item => (\r\n                                <List.Item>\r\n                                    <span>\r\n                                        {item.user.username}\r\n                                        <DeleteOutlined style={{ float: 'right'}} onClick={() => confirmUnbanUser(item.community_id, item.user_id, unbanUser, refetch)}/>\r\n                                    </span>\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </TabPane>\r\n\r\n                </Tabs>\r\n            </Card>\r\n        </main>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks'\r\n\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Message from 'antd/lib/message'\r\n\r\nimport { useCookies } from 'react-cookie'\r\n\r\nimport { CREATE_COMMUNITY, CHECK_COMMUNITY_NAME } from '../queries/posts'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst { TextArea } = Input\r\n\r\nexport default function CreateCommunity() {\r\n    let history = useHistory()\r\n    const [mutation] = useMutation(CREATE_COMMUNITY)\r\n    const [ communityTitle, setComTitle ] = useState('')\r\n    const [ communityObj, setComObj ] = useState(null)\r\n    const [ cookies ] = useCookies(['userCookie'])\r\n    const myStorage = window.localStorage;\r\n    const [ getTitle ] = useLazyQuery(CHECK_COMMUNITY_NAME, {\r\n        onCompleted: data => {setComTitle(data)}\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (myStorage.getItem('reload') != null) {\r\n            Message.success({\r\n                content: 'You have successfully create a commmunity.',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            myStorage.clear()\r\n            history.push('/communities')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if(communityTitle) {\r\n            if(communityTitle.community.title){\r\n                Message.warning('This community title is already taken. Input a different one.', 20) \r\n            } else {\r\n                await mutation({\r\n                    variables: {\r\n                        communityUser: communityObj\r\n                    }\r\n                })\r\n                window.location.reload()\r\n            }\r\n        }\r\n\r\n    }, [communityTitle])\r\n\r\n    \r\n    async function onFinish (values){\r\n        var emptyValues = 0\r\n        //If form item title is blank on initial submit\r\n        if(values.title === undefined || values.title === \"\") {\r\n            Message.warning({\r\n                content: 'Please fill out title',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            emptyValues++\r\n        }\r\n        \r\n        //If form item summary is blank on initial submit\r\n        if(values.summary === undefined || values.summary === \"\") {\r\n            Message.warning({\r\n                content: 'Please fill out summary',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            emptyValues++\r\n        }\r\n\r\n        myStorage.setItem('reload', 1)\r\n\r\n        var communityUser = {\r\n            title: values.title,\r\n            summary: values.summary,\r\n            user_id: cookies.userCookie.id\r\n        }\r\n        setComObj(communityUser)\r\n        //If there are ZERO empty values\r\n        //Mutation inserts a new community in mysql table\r\n        if(emptyValues === 0) {\r\n            getTitle({\r\n                variables: {\r\n                    name: values.title\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"createcommunity\">\r\n            <h3>Create Community</h3>\r\n\r\n            <Form className=\"create-community-form\" labelCol={{ span: 6 }} wrapperCol={{ span: 12 }} onFinish={onFinish} >\r\n                <Form.Item label=\"Title\" name=\"title\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Summary\" name=\"summary\">\r\n                    <TextArea rows={5} spellCheck=\"false\"/>\r\n                </Form.Item>\r\n                \r\n                <Form.Item wrapperCol={{ offset: 6, span: 12 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Card  from 'antd/lib/card'\r\nimport Button from 'antd/lib/button'\r\n\r\nconst LoginOrRegister = ({}) => {\r\n    return (\r\n        <Card className={\"LoginOrRegister\"}>\r\n            <div style={{ float: 'left', marginLeft: '20px', marginTop: '5px' }}>\r\n                <span>Login or sign up to access this content</span>\r\n            </div>\r\n            <div style={{ float: 'right', marginRight: '20px' }}>\r\n                <Button style={{ marginRight: '10px' }}><Link to={\"/login\"}>Login Page</Link></Button>\r\n                <Button style={{ marginLeft: '10px' }} type=\"primary\"><Link to={\"/register\"}>Register Page</Link></Button>\r\n            </div>\r\n        </Card>\r\n    )\r\n} \r\n\r\nexport default LoginOrRegister","import React, { useState } from 'react'\r\nimport ImageUploading from 'react-images-uploading'\r\n\r\nimport Button from 'antd/lib/button'\r\n\r\nimport UploadOutlined from '@ant-design/icons/UploadOutlined'\r\nimport EditTwoTone from '@ant-design/icons/EditTwoTone'\r\nimport DeleteTwoTone from '@ant-design/icons/DeleteTwoTone'\r\n\r\nconst ImageUploadingComponent = ({ imageState, setImageState }) => {\r\n    return (\r\n        <ImageUploading\r\n            multiple\r\n            value={imageState}\r\n            onChange={(imageList) => setImageState(imageList)}\r\n            maxNumber={1}\r\n            dataURLKey=\"data_url\"\r\n            className=\"ImageUploading\"\r\n        >\r\n            {({\r\n                imageList,\r\n                onImageUpload,\r\n                onImageUpdate,\r\n                onImageRemove,\r\n            }) => (\r\n                // write your building UI\r\n                <div className=\"upload_image-wrapper\">\r\n                    <Button className=\"uploadButton\" icon={<UploadOutlined />} onClick={onImageUpload} >\r\n                        Upload Image\r\n                    </Button>\r\n                    {imageList.map((image, index) => (\r\n                        <div key={index} className=\"image-item\">\r\n                            <div className=\"image-item__btn-wrapper\">\r\n                                <Button className=\"update\" icon={<EditTwoTone />} onClick={() => onImageUpdate(index)}>Update</Button>\r\n                                <Button className=\"remove\" icon={<DeleteTwoTone />} onClick={() => onImageRemove(index)}>Remove</Button>\r\n                            </div>\r\n                            <img className=\"preview-image\" src={image['data_url']} alt=\"\" />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </ImageUploading>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ImageUploadingComponent","import React, { useState } from 'react'\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Message from'antd/lib/message'\r\n\r\nimport ImageUploadingComponent from '../functions/imageuploading'\r\n\r\nimport { CREATE_POST, GET_POST_RECENT_BY_AUTHOR_ID } from '../../../queries/posts'\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst FormSubmit = ({ community }) => {\r\n    if(community === '') {\r\n        return (\r\n            <Button disabled>\r\n                Submit\r\n            </Button>\r\n        )\r\n    }\r\n    return (\r\n        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n    )\r\n}\r\n\r\nasync function onFinish(values, type, community, author_id, images, createPost, getPostRecentByAuthorID) {\r\n    let post\r\n    if((type === 'Post' || type === 'Link') && (!values.title || !values.text)){\r\n        Message.warning({\r\n            content: 'Please fill out both title and description ',\r\n            style: {\r\n                marginTop: '5vh',\r\n            },\r\n        }, 10)\r\n        return\r\n    } else if((type === 'Image') && (!values.title || images.length === 0)){\r\n        Message.warning({\r\n            content: \"Please input both a title and an image \",\r\n            style: {\r\n                marginTop: '5vh',\r\n            },\r\n        },10)\r\n        return\r\n    }\r\n    switch (type) {\r\n        case 'Post':\r\n            post = {\r\n                author_id: author_id,\r\n                title: values.title,\r\n                type: type,\r\n                image: null,\r\n                text: values.text,\r\n                active: 1,\r\n                community_id: community.id\r\n            }\r\n            await createPost({ variables: { post } })\r\n            getPostRecentByAuthorID({ variables: { id: author_id } })\r\n            break\r\n        case 'Link':\r\n            post = {\r\n                author_id: author_id,\r\n                title: values.title,\r\n                type: type,\r\n                image: null,\r\n                text: values.text,\r\n                active: 1,\r\n                community_id: community.id\r\n            }\r\n            await createPost({ variables: { post } })\r\n            getPostRecentByAuthorID({ variables: { id: author_id } })\r\n            break\r\n        case 'Image':\r\n            post = {\r\n                author_id: author_id,\r\n                title: values.title,\r\n                type: type,\r\n                image: images[0]['data_url'],\r\n                text: null,\r\n                active: 1,\r\n                community_id: community.id\r\n            }\r\n            await createPost({ variables: { post } })\r\n            getPostRecentByAuthorID({ variables: { id: author_id } })\r\n            break\r\n    }\r\n}\r\n\r\nconst CreatePostForm = ({ type, community, author_id }) => {\r\n    let history = useHistory()\r\n    const [images, setImages] = useState([])\r\n    const [createPost] = useMutation(CREATE_POST)\r\n    const [getPostRecentByAuthorID] = useLazyQuery(GET_POST_RECENT_BY_AUTHOR_ID, {\r\n        onCompleted: data => {\r\n            Message.success({\r\n                content: 'You have successfully posted',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            },15)\r\n            history.push(\"/viewpost/\" + data.post.id)\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n\r\n    switch (type) {\r\n        case 'Post':\r\n            return (\r\n                <Form className='createpost_post' onFinish={(values) => onFinish(values, type, community, author_id, images, createPost, getPostRecentByAuthorID)}>\r\n                    <Form.Item name='title'>\r\n                        <Input placeholder='Title' />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"text\">\r\n                        <TextArea className='post_textarea' allowClear placeholder=\"Text\" />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <FormSubmit community={community}/>\r\n                    </Form.Item>\r\n                </Form>\r\n            )\r\n        case 'Image':\r\n            return (\r\n                <Form className=\"create-post_image\" onFinish={(values) => onFinish(values, type, community, author_id, images, createPost, getPostRecentByAuthorID)}>\r\n                    <Form.Item name=\"title\">\r\n                        <Input placeholder=\"Title\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"image\" className=\"image\">\r\n                        <ImageUploadingComponent imageState={images} setImageState={setImages} />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <FormSubmit community={community}/>\r\n                    </Form.Item>\r\n                </Form>\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <Form className=\"create-post_link\" onFinish={(values) => onFinish(values, type, community, author_id, images, createPost, getPostRecentByAuthorID)}>\r\n                    <Form.Item name=\"title\">\r\n                        <Input placeholder=\"Title\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"text\" extra=\"Correct Format: www.google.com or google.com | Incorrect Format: https://google.com or http://google.com\">\r\n                        <Input placeholder=\"Link\"/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <FormSubmit community={community}/>\r\n                    </Form.Item>\r\n                </Form>\r\n            )\r\n    }\r\n}\r\n\r\nexport default CreatePostForm","import List from 'antd/lib/list'\r\nimport Card from 'antd/lib/card'\r\nimport { isLiteralObject } from '../functions/isLiteralObject'\r\nimport Directory from '../navigation/directory'\r\n\r\nconst Rules = ({ }) => {\r\n    return (\r\n        <Card className='rules'>\r\n            <List className='rules' header='Posting Rules'>\r\n                <List.Item>\r\n                    <p>Keep it legal, and avoid posting illegal content or soliciting or facilitating illegal or prohibited transactions.</p>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <p>Harrassment, Bullying, and threats are strictly forbidden</p>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <p>Abide by community rules. Post authentic content.</p>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <p>Respect the privacy of others. Instigating harassment, for example by revealing someone’s personal or confidential information, is not allowed. Never post or threaten to post intimate or sexually-explicit media of someone without their consent.</p>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <p>Do not post or encourage the posting of sexual or suggestive content involving minors.</p>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <p>Don’t impersonate an individual or an entity in a misleading or deceptive manner.</p>\r\n                </List.Item>\r\n            </List>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst Community_Rules_Card = ({ item }) => {\r\n    if (!isLiteralObject(item)) {\r\n        return (\r\n            <div className='community_rules'>\r\n                <Rules />\r\n                <Directory/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='community_rules'>\r\n            <Card>\r\n                <div className='title'>{item.community.title}</div>\r\n                {item.community.summary}\r\n            </Card>\r\n            <Rules/>\r\n            <Directory/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Community_Rules_Card","import Button from 'antd/lib/button'\r\nimport Dropdown from 'antd/lib/dropdown'\r\nimport DownOutlined from '@ant-design/icons/DownOutlined'\r\nimport Menu from 'antd/lib/menu'\r\n\r\nconst Dropdown_Community = ({ communityQuery, community, setCommunity }) => {\r\n    if (communityQuery.length === 0) {\r\n        return (\r\n            <Button>Join a Community to Post </Button>\r\n        )\r\n    }\r\n    return (\r\n        <Dropdown className='dropdown' overlay={\r\n            <Menu>\r\n                <Menu.Item key={0} onClick={() => setCommunity('')}>\r\n                    No Community\r\n                </Menu.Item>\r\n                {\r\n                    communityQuery.map((item) => {\r\n                        return(\r\n                            <Menu.Item key={item.community.id} onClick={() => setCommunity({title: item.community.title, id: item.community.id})}>\r\n                                {item.community.title}\r\n                            </Menu.Item>\r\n                        )\r\n                    })\r\n                }\r\n            </Menu>\r\n        }>\r\n            <Button className='dropdown-button'>\r\n                <div className='button-style'>\r\n                    <span>\r\n                        {(community.length === 0) ? 'Choose a Community': community.title}\r\n                    </span>\r\n                    <span>\r\n                        <DownOutlined />\r\n                    </span>\r\n                </div>\r\n            </Button>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nexport default Dropdown_Community","import Menu from 'antd/lib/menu'\r\nimport FileTextOutlined from '@ant-design/icons/FileTextOutlined'\r\nimport FileImageOutlined from '@ant-design/icons/FileImageOutlined'\r\nimport LinkOutlined from '@ant-design/icons/LinkOutlined'\r\n\r\nconst CreatePost_Menu = ({ currentMenu, setMenu }) => {\r\n    return (\r\n        <Menu className='createpost_menu' mode=\"horizontal\" selectedKeys={[currentMenu]}>\r\n            <Menu.Item key=\"Post\" icon={<FileImageOutlined />} onClick={() => setMenu('Post')}>\r\n                Post\r\n            </Menu.Item>\r\n            <Menu.Item key=\"Image\" icon={<FileTextOutlined />} onClick={() => setMenu('Image')}>\r\n                Image\r\n            </Menu.Item>\r\n            <Menu.Item key=\"Link\" icon={<LinkOutlined/>} onClick={() => setMenu('Link')}>\r\n                Link\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default CreatePost_Menu","import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Card from 'antd/lib/card'\r\n\r\n//Components\r\nimport LoginOrRegister from '../components/commons/LoginOrRegister/login-or-register'\r\nimport CreatePostForm from '../components/commons/create-post/createpost-form'\r\nimport Community_Rules_Card from '../components/commons/create-post/createpost_community_rules'\r\nimport Dropdown_Community from '../components/commons/create-post/dropdown_community'\r\nimport CreatePost_Menu from '../components/commons/create-post/createpost_menu'\r\n\r\nimport { useCookies } from 'react-cookie'\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQueryID } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_COMMUNITYUSERROLE_BY_USER } from '../queries/posts'\r\n\r\nexport default function CreatePost() {\r\n    const location = useLocation()\r\n    const [ cookies ] = useCookies(['userCookie'])\r\n    const [ currentMenu, setMenu ] = useState('Post')\r\n    const [ community, setCommunity ] = useState('')\r\n    let query = (isLiteralObject(cookies.userCookie)) ? GetGraphqlQueryID(cookies.userCookie.id, GET_COMMUNITYUSERROLE_BY_USER) : null\r\n\r\n    useEffect(() => {\r\n        if (location.state) {//if location is undefined\r\n            setMenu(location.state.item)\r\n        }\r\n    }, [location])\r\n\r\n    if (!isLiteralObject(cookies.userCookie)) {\r\n        return (\r\n            <main className=\"createpost\">\r\n                <h3>Create Post</h3>\r\n                <LoginOrRegister />\r\n            </main>\r\n        )\r\n    }\r\n\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"createpost\">\r\n                <h3>Create Post</h3>\r\n                <p style={{ textAlign: 'center' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"createpost\">\r\n            <div className='createpost_community_rules'>\r\n                <div className='createpost-wrapper'>\r\n                    <div className='header'>Create a Post</div>\r\n                    <hr className='horizontal-rule'/>\r\n                    <Dropdown_Community communityQuery={query.communityuserrole} community={community} setCommunity={setCommunity}/>\r\n                    <Card className='createpost_card'>\r\n                        <CreatePost_Menu setMenu={setMenu} currentMenu={currentMenu}/>\r\n                        <CreatePostForm type={currentMenu} community={community} author_id={cookies.userCookie.id}/>\r\n                    </Card>\r\n                </div>\r\n                <Community_Rules_Card item={query.communityuserrole.find(item => item.community.id === community.id)}/>\r\n            </div>\r\n        </main>\r\n    )\r\n}","import moment from 'moment'\r\nimport Message from 'antd/lib/message'\r\nimport Modal from 'antd/lib/modal'\r\n\r\nconst { confirm } = Modal\r\n//Confirm Modal For deleting posts\r\nexport function showConfirmDelete(passedPost, cookies, id, deletePostMutation, localStorage, history) {\r\n    confirm({\r\n        title: 'Delete Post',\r\n        content: \"Note: Deleting posts with commments will make it inactive, making the post still accessible. Posts without comments will be removed forever.\",\r\n        icon: null,\r\n        onOk() {\r\n            deleteOnFinish(passedPost, cookies, id, deletePostMutation, localStorage, history)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\n//function to call usemutation to delete post\r\nasync function deleteOnFinish(passedPost, cookies, id, deletePostMutation, localStorage, history) {\r\n    if (cookies.userCookie.id == passedPost.author_id) {\r\n        const post = {\r\n            id: parseInt(id),\r\n            commentLength: passedPost.comment.length\r\n        }\r\n        await deletePostMutation(\r\n            {\r\n                variables: {\r\n                    post\r\n                }\r\n            }\r\n        )\r\n        Message.success({\r\n            content: 'You have successfully deleted a post',\r\n            style: {\r\n                marginTop: '5vh',\r\n            },\r\n        }, 10)\r\n        history.push('/')\r\n    } else {\r\n        Message.error({\r\n            content: 'This action cannot be completed as you are not the author',\r\n            style: {\r\n                marginTop: '5vh',\r\n            },\r\n        }, 10)\r\n    }\r\n}\r\n\r\n//Confirm Modal for making post active and inactive\r\nexport function showConfirmLock(passedPost, cookies, id, lockPostMutation, localStorage) {\r\n    confirm({\r\n        title: \"Change Post's Active Status\",\r\n        content: 'Note: Changing active status of a post will make the enable/disable the author from making edits. Inactive posts will be hidden from being on View Post Page and Home Page.',\r\n        icon: null,\r\n        onOk() {\r\n            lockOnFinish(passedPost, cookies, id, lockPostMutation, localStorage)\r\n        },\r\n        width: '125vh'\r\n    })\r\n}\r\n\r\n//function to call usemutation to change post active/inactive\r\nasync function lockOnFinish(passedPost, cookies, id, lockPostMutation, localStorage) {\r\n    if (cookies.userCookie.id === passedPost.author_id) {\r\n        localStorage.setItem('reload', 5)\r\n        const post = {\r\n            id: parseInt(id),\r\n            active: passedPost.active\r\n        }\r\n        await lockPostMutation(\r\n            {\r\n                variables: {\r\n                    post\r\n                }\r\n            }\r\n        )\r\n        window.location.reload()\r\n    } else {\r\n        Message.error({\r\n            content: 'This action cannot be completed as you are not the author',\r\n            style: {\r\n                marginTop: '5vh',\r\n            },\r\n        }, 10)\r\n    }\r\n}\r\n\r\n//Function returns different content depending on Post type\r\nexport function contentSwitch(item) {\r\n    switch (item.type) {\r\n        case \"Image\":\r\n            return (\r\n                <img alt=\"\" src={item.image} style={{ maxHeight: \"60vh\", display: 'block', marginLeft: 'auto', marginRight: 'auto' }} />\r\n            )\r\n        case \"Post\":\r\n            return (\r\n                <p>{item.text}</p>\r\n            )\r\n        case \"Link\":\r\n            return (\r\n                <a href={\"https://\" + `${item.text}`}>{item.text}</a>\r\n            )\r\n\r\n    }\r\n}\r\n //function to call usemutation to create post\r\nexport async function comment_onFinish(localStorage, id, cookies, value, createCommentMutation) {\r\n    localStorage.setItem('reload', 1)\r\n    const comment = {\r\n        post_id: parseInt(id),\r\n        author_id: cookies.userCookie.id,\r\n        parent_comment_id: null,\r\n        comment: value\r\n    }\r\n    await createCommentMutation({\r\n        variables: { comment }\r\n    })\r\n    window.location.reload()\r\n}\r\n\r\nexport async function EditPost_OnFinish(passedPost, formValues, images, mutation, localStorage) {\r\n    let post\r\n    localStorage.setItem('reload', 6)\r\n    switch (passedPost.type) {\r\n        case 'Post':\r\n            post = {\r\n                id: parseInt(passedPost.id),\r\n                title: formValues.title,\r\n                image: null,\r\n                text: formValues.text,\r\n                updated_at: moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\").toString()\r\n            }\r\n            try {\r\n                await mutation({\r\n                    variables: {\r\n                        post\r\n                    }\r\n                })\r\n                window.location.reload()\r\n            } catch (error) {\r\n                Message.error({\r\n                    content: 'An error has occurred. ',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    }\r\n                }, 10)\r\n            }\r\n            break\r\n        case 'Image':\r\n            post = {\r\n                id: parseInt(passedPost.id),\r\n                title: formValues.title,\r\n                image: (images.length !== 0) ? images[0]['data_url'] : null,\r\n                text: null,\r\n                updated_at: moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\").toString()\r\n            }\r\n            try {\r\n                await mutation({\r\n                    variables: {\r\n                        post\r\n                    }\r\n                })\r\n                window.location.reload()\r\n            } catch (error) {\r\n                Message.error({\r\n                    content: 'An error has occurred. ',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    }\r\n                }, 10)\r\n            }\r\n            break\r\n        case 'Link':\r\n            post = {\r\n                id: parseInt(passedPost.id),\r\n                title: formValues.title,\r\n                image: null,\r\n                text: formValues.text,\r\n                updated_at: moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\").toString()\r\n            }\r\n            try {\r\n                await mutation({\r\n                    variables: {\r\n                        post\r\n                    }\r\n                })\r\n                window.location.reload()\r\n            } catch (error) {\r\n                Message.error({\r\n                    content: 'An error has occurred. ',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    }\r\n                }, 10)\r\n            }\r\n            break\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Typography from 'antd/lib/typography'\r\nimport EditOutlined from '@ant-design/icons/EditOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\nimport UnlockOutlined from '@ant-design/icons/UnlockOutlined'\r\nimport InfoCircleOutlined from '@ant-design/icons/InfoCircleOutlined'\r\nimport moment from 'moment'\r\n\r\nimport { showConfirmDelete, showConfirmLock, contentSwitch } from './components/functions'\r\nconst { Text } = Typography\r\n\r\nconst Header = ({ item }) => {\r\n    return (\r\n        <div>\r\n            <Text type='secondary'>{' Posted by ' + item.user.username + ' '}</Text>\r\n            <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n            </Tooltip>\r\n            <br />\r\n            <span>\r\n                <b>{item.title}</b>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ShowPost = ({ post, id, cookies, isEditable, triggerEditable, deletePostMutation, lockPostMutation, localStorage, history }) => {\r\n    return (\r\n        <Card\r\n            title={<Header item={post}/>}\r\n            className=\"viewpost-card\"\r\n            extra={\r\n                <Tooltip title=\"Inactive posts are locked and cannot be edited. It will also be hidden in Community and Home.\" placement=\"bottomLeft\"> \r\n                    <InfoCircleOutlined /> {(post.active == 1) ? \"Status: Active\" : \"Status: Inactive\"} \r\n                </Tooltip>\r\n            }\r\n            actions={\r\n                (cookies.userCookie !== undefined && cookies.userCookie.id === post.author_id) ?\r\n                [\r\n                    <EditOutlined key=\"edit\" onClick={() => triggerEditable(!isEditable)}/>,\r\n                    <DeleteOutlined onClick={() => showConfirmDelete(post, cookies, id, deletePostMutation, localStorage, history)} />,\r\n                    <UnlockOutlined onClick={() => showConfirmLock(post, cookies, id, lockPostMutation, localStorage)} />\r\n                ]\r\n                : \r\n                null\r\n            }\r\n        >\r\n            <div className=\"clear\"> </div>\r\n            {contentSwitch(post)}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ShowPost\r\n//`/editpost/${post.id}`\r\n//post.author_id != cookies.userCookie.id","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Form from 'antd/lib/form'\r\nimport Typography from 'antd/lib/typography'\r\nimport Tooltip from 'antd/lib/tooltip'\r\n\r\nimport EditOutlined from '@ant-design/icons/EditOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\nimport UnlockOutlined from '@ant-design/icons/UnlockOutlined'\r\n\r\nimport { EditPost_OnFinish } from './components/functions'\r\nimport ImageUploadingComponent from '../functions/imageuploading'\r\n\r\nimport { showConfirmDelete, showConfirmLock } from './components/functions'\r\nimport moment from 'moment'\r\n\r\nconst { TextArea } = Input\r\nconst { Text } = Typography\r\n\r\nconst Header = ({ item }) => {\r\n    return (\r\n        <div>\r\n            <Link to={'/viewpost/' + item.community.id}>{item.community.title}</Link>\r\n            {<Text type='secondary'>{' Posted by ' + item.user.username + ' '}</Text>}\r\n            {\r\n                <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                    {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                </Tooltip>\r\n            }\r\n            <br />\r\n            <span>\r\n                <b>{item.title}</b>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst EditPost = ({ post, id, post_type, cookies, isEditable, triggerEditable, deletePostMutation, lockPostMutation, update_post_mutation, localStorage, history }) => {\r\n    const [images, setImages] = useState([])\r\n    const onFinish = (values) => {\r\n        EditPost_OnFinish(post, values, images, update_post_mutation, localStorage)\r\n    }\r\n    const ContentDisplay = ({ post_type }) => {\r\n        switch (post_type) {\r\n            case 'Post':\r\n                return (\r\n                    <div className=\"viewpost_edit_post\">\r\n                        <Form\r\n                            name=\"edit_post\"\r\n                            className=\"edit-post_post\"\r\n                            initialValues={{\r\n                                [\"title\"]: post.title,\r\n                                [\"text\"]: post.text\r\n                            }}\r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item name=\"title\">\r\n                                <Input />\r\n                            </Form.Item>\r\n                            <Form.Item name=\"text\">\r\n                                <TextArea className=\"textArea\" spellCheck=\"false\" allowClear />\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </div>\r\n                )\r\n            case 'Link':\r\n                return (\r\n                    <div className=\"viewpost_edit-link\">\r\n                        <div className=\"edit-content-link\">\r\n                            <Form\r\n                                name=\"edit_post\"\r\n                                className=\"edit-post_link\"\r\n                                initialValues={{\r\n                                    [\"title\"]: post.title,\r\n                                    [\"link\"]: post.text\r\n                                }}\r\n                                onFinish={onFinish}\r\n                            >\r\n                                <Form.Item name=\"title\">\r\n                                    <Input />\r\n                                </Form.Item>\r\n                                <Form.Item name=\"link\" extra=\"Correct Format: www.google.com or google.com | Incorrect Format: https://google.com or http://google.com\">\r\n                                    <Input />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case 'Image':\r\n                return (\r\n                    <div className=\"viewpost_edit_image\">\r\n                        <div className=\"current-image\">\r\n                            <h2 className='header2'>Current Image</h2>\r\n                            <img className=\"image\" src={post.image} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"edit-post_image\">\r\n                            <h2 className='header2'>Change Current Image</h2>\r\n                            <Form \r\n                                name=\"edit_post\" \r\n                                initialValues={{ \r\n                                    [\"title\"]: post.title \r\n                                }}\r\n                                onFinish={onFinish}\r\n                                layout=\"vertical\"\r\n                                className=\"form\"\r\n                            >\r\n                                <Form.Item name=\"title\" className=\"edit-post_image_title\" label=\"Title\">\r\n                                    <Input />\r\n                                </Form.Item>\r\n                                <Form.Item name=\"image\"className=\"edit-post_image_image\">\r\n                                    <ImageUploadingComponent imageState={images} setImageState={setImages}/>\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<Header item={post}/>}\r\n            className=\"viewpost-editcard\"\r\n            actions={\r\n                (cookies.userCookie !== undefined && cookies.userCookie.id === post.author_id) ?\r\n                    [\r\n                        <EditOutlined key=\"edit\" onClick={() => triggerEditable(!isEditable)} />,\r\n                        <DeleteOutlined onClick={() => showConfirmDelete(post, cookies, id, deletePostMutation, localStorage, history)} />,\r\n                        <UnlockOutlined onClick={() => showConfirmLock(post, cookies, id, lockPostMutation, localStorage)}/>\r\n                    ]\r\n                    :\r\n                    null\r\n            }\r\n        >\r\n            <ContentDisplay post_type={post_type} />\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default EditPost","import React, { useEffect, useState, useRef } from 'react'\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport Comment from 'antd/lib/comment'\r\nimport Form from 'antd/lib/form'\r\nimport Button from 'antd/lib/button'\r\nimport Input from 'antd/lib/input'\r\nimport Modal from 'antd/lib/modal'\r\n\r\nimport moment from 'moment'\r\n\r\nimport { CREATE_COMMENT, GET_FAMILY_COMMENTS, UPDATE_COMMENT, DELETE_COMMENT, DELETE_PARENT_COMMENT } from '../../../../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nconst { TextArea } = Input\r\nconst { confirm } = Modal\r\n\r\nconst Comments = ({ commentsObj }) => {\r\n  const parentComments = commentsObj.filter(pc => pc.parent_comment_id === null)\r\n  const [display, setDisplay] = useState('')\r\n  const [editDisplay, setEditDisplay] = useState('')\r\n  const [value, setValue] = useState('')\r\n  const [cookies] = useCookies(['userCookie'])\r\n  const [mutation] = useMutation(CREATE_COMMENT)\r\n  const [editMutation] = useMutation(UPDATE_COMMENT)\r\n  const [deleteMutation] = useMutation(DELETE_COMMENT)\r\n  const [deleteParentMutation] = useMutation(DELETE_PARENT_COMMENT)\r\n  let { id } = useParams()\r\n  const myStorage = window.localStorage;\r\n\r\n  const [familyComment, setFamilyComment] = useState(null)\r\n  const [checkParenthood] = useLazyQuery(GET_FAMILY_COMMENTS, {\r\n    onCompleted: data => {\r\n      setFamilyComment(data.comment)\r\n    }\r\n  })\r\n\r\n\r\n  useEffect(async () => {\r\n    if (familyComment !== null) {\r\n      if (familyComment.child.length === 0) {\r\n        //Has Child\r\n        myStorage.setItem('reload', 2)\r\n        await deleteMutation({\r\n          variables: {\r\n            comment: {\r\n              id: familyComment.id\r\n            }\r\n          }\r\n        })\r\n        if (familyComment.parent.id !== null) {\r\n          //Has Parent Comment\r\n          if (familyComment.parent.comment === null) {\r\n            //Parent Comment has been previously deleted\r\n            //1: Recursive call to check if parent comment has a parent commend, the selected comment's grandparent, then delete all deleted parents\r\n            checkParenthood({\r\n              variables: {\r\n                id: parseInt(familyComment.parent.id)\r\n              }\r\n            })\r\n          } else {\r\n            //3: if comment is previously deleted but has an existing parent\r\n            window.location.reload()\r\n          }\r\n        } else {\r\n          //If no Parent Comment\r\n          //2: if comment is previously deleted but has an deleted parent\r\n          window.location.reload()\r\n        }\r\n      } else {\r\n        myStorage.setItem('reload', 2)\r\n        await deleteParentMutation({\r\n          variables: {\r\n            comment: {\r\n              id: familyComment.id\r\n            }\r\n          }\r\n        })\r\n        window.location.reload()\r\n      }\r\n    }\r\n  }, [familyComment])\r\n\r\n  function showConfirm(id) {\r\n    confirm({\r\n      title: 'Are you sure you want to delete this comment?',\r\n      content: 'Note: Parent comments will not be deleted until the child comments are deleted as well',\r\n      onOk() {\r\n        handleDeleteSubmit(id)\r\n      },\r\n      width: '125vh'\r\n    })\r\n  }\r\n\r\n  const handleChange = (text) => {\r\n    setValue(text.target.value)\r\n  }\r\n  //Handles submit for Parent Comments\r\n  async function handleSubmit(text, parentID) {\r\n    myStorage.setItem('reload', 1)\r\n    const comment = {\r\n      post_id: parseInt(id),\r\n      author_id: cookies.userCookie.id,\r\n      parent_comment_id: parentID,\r\n      comment: text\r\n    }\r\n    await mutation(\r\n      {\r\n        variables: {\r\n          comment\r\n        }\r\n      }\r\n    )\r\n    window.location.reload()\r\n  }\r\n\r\n  //Handles submit for edit comments\r\n  async function handleEditSubmit(text, passedID) {\r\n    myStorage.setItem('reload', 3)\r\n    const comment = {\r\n      id: parseInt(passedID),\r\n      comment: text,\r\n      updated_at: moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\").toString()\r\n    }\r\n    await editMutation(\r\n      {\r\n        variables: {\r\n          comment\r\n        }\r\n      }\r\n    )\r\n    window.location.reload()\r\n  }\r\n\r\n  //Handles submit for Parent Comments\r\n  async function handleDeleteSubmit(id) {\r\n    checkParenthood({\r\n      variables: {\r\n        id: parseInt(id)\r\n      }\r\n    })\r\n  }\r\n\r\n  //Maps All Parent Comments from database\r\n  return parentComments.map(cObj => (\r\n    <Comment\r\n      actions={[(cookies.userCookie != undefined ?\r\n        <div>\r\n          <span style={{ cursor: 'pointer' }} key={\"comment-list-reply-to-\" + cObj.id.toString()} onClick={() => { setDisplay(display === cObj.id ? '' : cObj.id) }}>\r\n            Reply\r\n          </span>\r\n          {(cookies.userCookie.id == cObj.author_id) ?\r\n            <span>\r\n              <span style={{ marginLeft: \"5px\", cursor: 'pointer' }} key={\"comment-list-edit-\" + cObj.id.toString()} onClick={() => { setEditDisplay(editDisplay === cObj.id ? '' : cObj.id) }}>\r\n                Edit\r\n              </span>\r\n              <span style={{ marginLeft: \"5px\", cursor: 'pointer' }} key={\"comment-list-delete-\" + cObj.id.toString()} onClick={() => { showConfirm(cObj.id) }}>\r\n                Delete\r\n              </span>\r\n            </span> : null\r\n          }\r\n        </div> :\r\n        <span>Login to reply</span>)]}\r\n      key={cObj.id}\r\n      author={cObj.user.username}\r\n      datetime={moment(parseInt(cObj.updated_at)).format('MMMM Do YYYY, h:mm:ss a')}\r\n      content={(editDisplay === cObj.id) ?\r\n        <Editor display={editDisplay === cObj.id ? true : false} EditorKey={cObj.id} onChange={(e) => handleChange(e)} onSubmit={() => handleEditSubmit(value, cObj.id)} defaultValue={cObj.comment} />\r\n        :\r\n        (cObj.comment == null) ? <p style={{ fontWeight: 'bold' }}>This post is unavailable or deleted</p> : <p>{cObj.comment}</p>\r\n      }\r\n    >\r\n      <Editor display={display === cObj.id ? true : false} EditorKey={cObj.id} onChange={(e) => handleChange(e)} onSubmit={() => handleSubmit(value, cObj.id)} value={value} defaultValue={\"\"} />\r\n      <ChildComments commentsObj={commentsObj} parentID={cObj.id} handleChange={handleChange} handleSubmit={handleSubmit} handleEditSubmit={handleEditSubmit} showConfirm={showConfirm} value={value} cookies={cookies} />\r\n    </Comment>\r\n  ))\r\n}\r\n\r\n//Maps all Child Comments from Parent. This all recursive calls to map children of the child comments\r\nconst ChildComments = ({ commentsObj, parentID, handleChange, handleSubmit, handleEditSubmit, showConfirm, value, cookies }) => {\r\n  const [display, setDisplay] = useState('')\r\n  const [editDisplay, setEditDisplay] = useState('')\r\n  const childComments = commentsObj.filter(cc => cc.parent_comment_id === parentID)\r\n\r\n  return childComments.map(cObj => (\r\n    <Comment\r\n      actions={[(cookies.userCookie != undefined ?\r\n        <div>\r\n          <span style={{ cursor: 'pointer' }} key={\"comment-list-reply-to-\" + cObj.id.toString()} onClick={() => { setDisplay(display === cObj.id ? '' : cObj.id) }}>\r\n            Reply\r\n          </span>\r\n          {(cookies.userCookie.id == cObj.author_id) ?\r\n            <span>\r\n              <span style={{ marginLeft: \"5px\", cursor: 'pointer' }} key={\"comment-list-edit-\" + cObj.id.toString()} onClick={() => { setEditDisplay(editDisplay === cObj.id ? '' : cObj.id) }}>\r\n                Edit\r\n              </span>\r\n              <span style={{ marginLeft: \"5px\", cursor: 'pointer' }} key={\"comment-list-delete-\" + cObj.id.toString()} onClick={() => { showConfirm(cObj.id) }}>\r\n                Delete\r\n              </span>\r\n            </span> : null\r\n          }\r\n        </div> :\r\n        <span>Login to reply</span>)]}\r\n      key={cObj.id}\r\n      author={cObj.user.username}\r\n      datetime={moment(parseInt(cObj.updated_at)).format('MMMM Do YYYY, h:mm:ss a')}\r\n      content={(editDisplay === cObj.id) ?\r\n        <Editor display={editDisplay === cObj.id ? true : false} EditorKey={cObj.id} onChange={(e) => handleChange(e)} onSubmit={() => handleEditSubmit(value, cObj.id)} defaultValue={cObj.comment} />\r\n        :\r\n        (cObj.comment == null) ? <p style={{ fontWeight: 'bold' }}>This post is unavailable or deleted</p> : <p>{cObj.comment}</p>\r\n      }\r\n    >\r\n      <Editor display={display === cObj.id ? true : false} EditorKey={cObj.id} onChange={(e) => handleChange(e)} onSubmit={() => handleSubmit(value, cObj.id)} value={value} defaultValue={\"\"} />\r\n      <ChildComments commentsObj={commentsObj} parentID={cObj.id} handleChange={handleChange} handleSubmit={handleSubmit} handleEditSubmit={handleEditSubmit} showConfirm={showConfirm} value={value} cookies={cookies} />\r\n    </Comment>\r\n  ))\r\n\r\n}\r\n\r\nconst Editor = ({ display, EditorKey, onChange, onSubmit, defaultValue }) => {\r\n  if (display === false) {\r\n    return null\r\n  } else {\r\n    return (\r\n      <Form key={EditorKey}>\r\n        <Form.Item >\r\n          <TextArea className=\"editor\" rows={4} onChange={onChange} defaultValue={defaultValue} />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button htmlType=\"submit\" type=\"primary\" onClick={onSubmit}>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Comments\r\n\r\n//https://stackoverflow.com/questions/65238595/how-do-i-hide-and-show-components-with-usestate-or-conditional-rendering-in-reac\r\n//https://levelup.gitconnected.com/per-my-last-comment-creating-reply-threads-in-your-react-rails-app-d8334a00dfa1\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { useParams } from 'react-router'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Form from 'antd/lib/form'\r\nimport Button from 'antd/lib/button'\r\nimport Input from 'antd/lib/input'\r\n\r\nimport ShowPost from '../components/commons/viewpost/showPost'\r\nimport EditPost from '../components/commons/viewpost/editPost'\r\n\r\nimport Comments from '../components/commons/viewpost/viewpost-comments/comments'\r\nimport Directory from '../components/commons/navigation/directory'\r\nimport LoginOrRegister from '../components/commons/LoginOrRegister/login-or-register'\r\n\r\nimport { isLiteralObject } from '../components/commons/functions/isLiteralObject'\r\nimport { reloadMessage } from '../components/commons/viewpost/components/reloadMessage'\r\nimport { comment_onFinish } from '../components/commons/viewpost/components/functions'\r\nimport { GetGraphqlQueryID } from '../components/commons/functions/getgraphqlquery'\r\nimport { GET_POST_COMMENTS, CREATE_COMMENT, DELETE_POST, LOCK_POST, UPDATE_POST } from '../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nconst { TextArea } = Input\r\n\r\nexport default function ViewPost() {\r\n    let history = useHistory()\r\n    let { id } = useParams()\r\n    let query = GetGraphqlQueryID(id, GET_POST_COMMENTS)\r\n    const [value, setValue] = useState('')\r\n    const [editPostToggle, setEditPostToggle] = useState(false)\r\n    const [createCommentMutation] = useMutation(CREATE_COMMENT)\r\n    const [deletePostMutation] = useMutation(DELETE_POST)\r\n    const [lockPostMutation] = useMutation(LOCK_POST)\r\n    const [update_post_mutation] = useMutation(UPDATE_POST)\r\n    const [cookies] = useCookies(['userCookie'])\r\n    const localStorage = window.localStorage;\r\n\r\n    //use effect to display messages after window reload\r\n    useEffect(() => {\r\n        if (localStorage.getItem('reload') != null) {\r\n            reloadMessage(localStorage)\r\n            localStorage.clear()\r\n        }\r\n    }, [])\r\n\r\n    //If query from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"viewpost\">\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    const PostEditable = ({ toggle }) => {\r\n        if (toggle) {// Not Editable\r\n            return (\r\n                <EditPost\r\n                    post={query.post}\r\n                    id={id}\r\n                    post_type={query.post.type}\r\n                    cookies={cookies}\r\n                    isEditable={editPostToggle}\r\n                    triggerEditable={setEditPostToggle}\r\n                    deletePostMutation={deletePostMutation}\r\n                    lockPostMutation={lockPostMutation}\r\n                    update_post_mutation={update_post_mutation}\r\n                    localStorage={localStorage}\r\n                    history={history}\r\n                />\r\n            )\r\n        } else {\r\n            return (\r\n                <ShowPost\r\n                    post={query.post}\r\n                    id={id}\r\n                    cookies={cookies}\r\n                    isEditable={editPostToggle}\r\n                    triggerEditable={setEditPostToggle}\r\n                    deletePostMutation={deletePostMutation}\r\n                    lockPostMutation={lockPostMutation}\r\n                    localStorage={localStorage}\r\n                    history={history}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main className=\"viewpost\">\r\n            <h3><b>{(!editPostToggle) ? 'View Post' : 'Edit Post'}</b></h3>\r\n            <div className='Post_Comment_Community'>\r\n                <div className='Post_Comment'>\r\n                    <PostEditable toggle={editPostToggle} />\r\n                    <div className=\"CommentDisplay\">\r\n                        <Card title={`${query.post.comment.length} ${query.post.comment.length > 1 ? 'comments' : 'comment'}`}>\r\n                            {(cookies.userCookie !== undefined ?\r\n                                <Card className={\"CommentForm\"}>\r\n                                    <Form key={0}>\r\n                                        <Form.Item >\r\n                                            <TextArea className=\"editor\" rows={4} onChange={(e) => setValue(e.target.value)} />\r\n                                        </Form.Item>\r\n                                        <Form.Item>\r\n                                            <Button htmlType=\"submit\" type=\"primary\" onClick={() => comment_onFinish(localStorage, id, cookies, value, createCommentMutation)}>\r\n                                                Add Comment\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </Card>\r\n                                :\r\n                                <LoginOrRegister />\r\n                            )}\r\n                            <Comments commentsObj={query.post.comment}/>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n                <div className='community_directory'>\r\n                    <Card>\r\n                        <div className='title'><Link to={'/community/' + query.post.community.id}>{query.post.community.title}</Link></div>\r\n                        {query.post.community.summary}\r\n                    </Card>\r\n                    <Directory />\r\n                </div>\r\n            </div>\r\n\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\n//add community card\r\n// Revamp viewpost communityhome\r\n","import Message from 'antd/lib/message'\r\n\r\nexport function reloadMessage(localStorage) {\r\n    switch (parseInt(localStorage.getItem('reload'))) {\r\n        case 1:\r\n            Message.success({\r\n                content: 'You have successfully commented',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            break;\r\n        case 2:\r\n            Message.success({\r\n                content: 'You have successfully deleted a comment.',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            break;\r\n        case 3:\r\n            Message.success({\r\n                content: 'You have successfully changed a comment',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n            break;\r\n        case 4:\r\n            Message.success({\r\n                content: 'You have successfully deleted a post. Posts are inactive instead if it has comment(s). ',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 20)\r\n            break;\r\n        case 5:\r\n            Message.success({\r\n                content: 'You have successfully changed the active status of your post.',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 20)\r\n            break;\r\n        case 6:\r\n            Message.success({\r\n                content: 'You have successfully updated your post.',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 20)\r\n            break;\r\n    }\r\n}","//Checks if all form inputs are not blank\r\nimport Message from 'antd/lib/message'\r\nexport function validateForm(object){\r\n    var count = 0\r\n    for (const property in object) {\r\n        if(object[property] === undefined || object[property] === \"\") {\r\n            Message.warning({\r\n                content: 'Please fill out ' + `${property}`,\r\n                style: {\r\n                    marginTop: '4vh'\r\n                },\r\n                duration: 6\r\n            })\r\n            count++\r\n        }\r\n    }\r\n    if(count > 0) { \r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useLazyQuery } from '@apollo/react-hooks'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport Button from 'antd/lib/button'\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Message from 'antd/lib/message'\r\nimport MailOutlined from '@ant-design/icons/MailOutlined'\r\nimport LockOutlined from '@ant-design/icons/LockOutlined'\r\n\r\nimport { validateForm } from '../../components/commons/functions/validateForm'\r\nimport { LOGIN_USER } from '../../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nexport default function Login() {\r\n    let history = useHistory()\r\n    const [ cookies, set ] = useCookies(['userCookie'])\r\n    const [ loginUser ] = useLazyQuery(LOGIN_USER, {\r\n        onCompleted: result => {\r\n            if(result.user.id === null) {\r\n                Message.error({\r\n                    content: 'Wrong Password. Please try again.',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                },10)\r\n            } else {\r\n                set('userCookie', result.user, {path: '/', sameSite:'lax', secure: true, expires: 0})//Set cookie for users\r\n                Message.success({\r\n                    content: 'You successfully logged in.',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                },10)\r\n                history.push(\"/account\")\r\n            }\r\n        }, \r\n        onError: err => {\r\n            Message.error({\r\n                content: 'No account found for this email. Please try again.',\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            },10)\r\n        }\r\n    })\r\n\r\n    const onFinish = (values) => {\r\n        if(validateForm(values)) {//validates form before logging in\r\n            loginUser({\r\n                variables: {\r\n                    email: values.email,\r\n                    password: values.password\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    if(cookies.userCookie === undefined) {\r\n        return (\r\n            <main className=\"login\">\r\n                <Form name=\"normal_login\" className=\"login-form\" onFinish={onFinish}>\r\n                    <h3 style={{textAlign:\"center\"}}><b>User Login</b></h3>\r\n                    <Form.Item name=\"email\">\r\n                        <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" type=\"email\"/>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"password\" >\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"Password\" />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <span><Link to={\"/register\"}>Register now!</Link></span>\r\n                        <Link to={\"/forgot\"} className=\"login-form-forgot\" style={{ float: \"right\" }}>\r\n                            Forgot password!\r\n                        </Link>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Log in\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"login\">\r\n            <div className=\"logged-in\">\r\n                <h1>You're already logged in.</h1> \r\n            </div>\r\n            <div className=\"redirect\">\r\n                <Link to={\"/\"}>Redirect to Home</Link>\r\n            </div>\r\n        </main>\r\n    )\r\n\r\n}\r\n\r\n//createPost\r\n\r\n//https://www.npmjs.com/package/react-cookie\r\n//https://github.com/reactivestack/cookies/tree/07c0e7eae0aae674262f78d84aad31df24bb7a96/packages/react-cookie\r\n","import React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from 'antd/lib/button'\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Message from 'antd/lib/message'\r\nimport UserOutlined from '@ant-design/icons/UserOutlined'\r\nimport LockOutlined from '@ant-design/icons/LockOutlined'\r\nimport MailOutlined from '@ant-design/icons/MailOutlined'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { useCookies } from 'react-cookie'\r\nimport { validateForm } from '../../components/commons/functions/validateForm'\r\n\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\nimport { REGISTER_USER, CHECK_USER_EMAIL } from '../../queries/posts/index'\r\n\r\nexport default function Register() {\r\n    let history = useHistory();\r\n    const [cookies] = useCookies(['userCookie'])\r\n    const [user, setUser] = useState(null)\r\n    const [registerUser] = useMutation(REGISTER_USER);\r\n    const [getUser] = useLazyQuery(CHECK_USER_EMAIL, {\r\n        onCompleted: async (data) => {\r\n            if (data.user.email) {\r\n                Message.warning('Email is already registered.', 20)\r\n            } else {\r\n                //GraphQL to add user\r\n                await registerUser({ variables: { user: user } })\r\n                Message.success({ content: 'Account has been successfully registered.', style: { marginTop: '5vh' } }, 10)\r\n                history.push(\"/login\")\r\n            }\r\n        }\r\n    })\r\n\r\n    async function OnFinish(values) {\r\n        setUser({\r\n            email: values.Email,\r\n            password: values.Password,\r\n            username: values.Username,\r\n        })\r\n        if (validateForm(values)) {\r\n            if (values.Password === values.ConfirmPassword) {\r\n                getUser({//GraphQL to grab user with same email as the input\r\n                    variables: {\r\n                        email: values.Email\r\n                    }\r\n                })\r\n            } else {\r\n                Message.warning('Passwords do not match.', 10)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <main className=\"register\">\r\n                <Form name=\"normal_register\" className=\"register-form\" onFinish={OnFinish}>\r\n                    <h3 style={{ textAlign: \"center\" }}><b>User Register</b></h3>\r\n                    <h3 style={{textAlign:\"center\"}}>Note: Password Recovery and Reset is not supported</h3>\r\n                    <Form.Item name=\"Email\">\r\n                        <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} type=\"email\" placeholder=\"Please input your email!\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"Username\">\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Please input your Username\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"Password\">\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"Please input your Password!\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"ConfirmPassword\">\r\n                        <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"Please confirm your Password!\" />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <span><Link to={\"/login\"}>Login!</Link></span>\r\n                        <Link to={\"/forgot\"} className=\"login-form-forgot\" style={{ float: \"right\" }}>\r\n                            Forgot password!\r\n                        </Link>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Sign Up\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </main>\r\n        )\r\n    }\r\n    return (\r\n        <main className=\"login\">\r\n            <div className=\"logged-in\">\r\n                <h1>You're already logged in.</h1>\r\n            </div>\r\n            <div className=\"redirect\">\r\n                <Link to={\"/\"}>Redirect to Home</Link>\r\n            </div>\r\n        </main>\r\n    )\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport MailOutlined from '@ant-design/icons/MailOutlined'\r\nimport Form from 'antd/lib/form'\r\nimport Button from 'antd/lib/button'\r\nimport Input from 'antd/lib/input'\r\nimport Message from 'antd/lib/message'\r\n\r\nimport { GET_USER_BY_EMAIL, GET_SECURITY_QUESTIONS_BY_AUTHOR_ID, CHECK_QUESTION, CHANGE_USER_PASSWORD } from '../../queries/posts'\r\n\r\n//gets random number\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n//gets user by email for provided email for forgot password\r\nfunction OnFinish_Email(getUserByEmail, email) {\r\n    getUserByEmail({\r\n        variables: {\r\n            email: email\r\n        }\r\n    })\r\n}\r\n//checks security question and answer\r\nfunction OnFinish_ResetPassword(checkQuestion, query, answer) {\r\n    checkQuestion({\r\n        variables: {\r\n            user_id: query.user_id,\r\n            question: query.question,\r\n            answer: answer\r\n        }\r\n    })\r\n}\r\n\r\nexport default function Forgot() {\r\n    const [query, setQuery] = useState(null)\r\n    const [randomNum, setRandom] = useState(null)\r\n    const history = useHistory()\r\n    const [changePassword] = useMutation(CHANGE_USER_PASSWORD)//mutation to change password\r\n    const [getQuestions] = useLazyQuery(GET_SECURITY_QUESTIONS_BY_AUTHOR_ID, {//gets questions from provided user id\r\n        onCompleted: async (result) => {\r\n            setQuery(result)\r\n        },\r\n        fetchPolicy: \"network-only\"\r\n    })\r\n\r\n    const [getUserByEmail] = useLazyQuery(GET_USER_BY_EMAIL, {//gets user by email\r\n        onCompleted: async (result) => {\r\n            if(result.user.id !== null) {\r\n                getQuestions({//calls get questions to grab questions with user id provided by email query call\r\n                    variables: {\r\n                        id: result.user.id\r\n                    }\r\n                })\r\n            } else {\r\n                Message.error({\r\n                    content: 'No Account has been found with provided input',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: \"network-only\"\r\n    })\r\n\r\n    const [checkQuestion] = useLazyQuery(CHECK_QUESTION, {//checks questions\r\n        onCompleted: async (results) => {\r\n            if(results.security_question.user_id !== null) {\r\n                changePassword({//resets to generic password to reset later on by user\r\n                    variables: {\r\n                        user: {\r\n                            id: results.security_question.user_id,\r\n                            password: \"password\"\r\n                        }\r\n                    }\r\n                })\r\n                Message.success({\r\n                    content: 'Your password has been reset. Use \"password\" to login. Go to account settings to change it to a new one.',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 20)\r\n                history.push('/login')\r\n            } else { \r\n                Message.error({\r\n                    content: 'Wrong Answer. Try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(query !== null && query.user !== null) {\r\n            setRandom(getRandomInt(query.security_questions.length))//set universal random number based of length of all user's questions\r\n        }\r\n    },[query])\r\n\r\n    //if no queried data and no random number assigned. \r\n    if(query !== null && randomNum !== null) {\r\n        return (\r\n            <main className=\"forgot\">\r\n                <Form \r\n                    name=\"forgot\"\r\n                    className=\"forgot-form\" \r\n                    initialValues={{ [\"email\"]: query.email}}\r\n                    onFinish={(values) => OnFinish_ResetPassword(checkQuestion, query.security_questions[randomNum], values.answer)}\r\n                >\r\n                    <h3 style={{ textAlign: \"center\" }}><b>Forgot Password</b></h3>\r\n                    <Form.Item>\r\n                        <div>Security Question: {query.security_questions[randomNum].question}</div>\r\n                    </Form.Item>\r\n                    <Form.Item name='answer'>\r\n                        <Input placeholder=\"Please input your answer\" />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"forgot-form-button\">\r\n                            Reset Password\r\n                        </Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <span><Link to={\"/login\"}>Login!</Link></span>\r\n                        <Link to={\"/register\"} style={{ float: \"right\" }}>\r\n                            Register!\r\n                        </Link>\r\n                    </Form.Item>\r\n                </Form>\r\n            </main>\r\n        )\r\n    }\r\n    //default view. so user can input their email and get their security question\r\n    return (\r\n        <main className=\"forgot\">\r\n            <Form name=\"forgot\" className=\"forgot-form\" onFinish={(values) => OnFinish_Email(getUserByEmail, values.email)}>\r\n                <h3 style={{ textAlign: \"center\" }}><b>Forgot Password</b></h3>\r\n                <Form.Item name=\"email\">\r\n                    <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} type=\"email\" placeholder=\"Please input your email!\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"forgot-form-button\">\r\n                        Forgot Password\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <span><Link to={\"/login\"}>Login!</Link></span>\r\n                    <Link to={\"/register\"} style={{ float: \"right\" }}>\r\n                        Register!\r\n                    </Link>\r\n                </Form.Item>\r\n            </Form>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport CreatePostNav from '../../components/commons/navigation/create-post-nav'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport List from 'antd/lib/list'\r\nimport Tabs from 'antd/lib/tabs'\r\nimport Empty from 'antd/lib/empty'\r\nimport Avatar from 'antd/lib/avatar'\r\n\r\nimport { useCookies } from 'react-cookie'\r\n\r\nimport ContentCard from '../../components/commons/component/ContentCard'\r\nimport LoginOrRegister from '../../components/commons/LoginOrRegister/login-or-register'\r\nimport { isLiteralObject } from '../../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQueryID_Refetch } from '../../components/commons/functions/getgraphqlquery'\r\nimport { GET_COMMUNITYUSERROLE_AND_USER_AND_POST } from '../../queries/posts'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst PersonalCard = ({ user }) => {\r\n    return (\r\n        <Card className='personal_card'>\r\n            <div className='css-header' />\r\n            <div>\r\n                <Avatar shape=\"square\" size={80} style={{ borderStyle: 'solid 1px', backgroundColor: 'pink' }} src=\"https://joeschmoe.io/api/v1/jon\" />\r\n                <p><strong>u/{user.username}</strong></p>\r\n                <Link to='/accountsettings'>Settings</Link>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default function Account() {\r\n    const [cookies] = useCookies(['userCookie'])\r\n    let [query, queryRefetch] = (cookies.userCookie !== undefined) ? GetGraphqlQueryID_Refetch(cookies.userCookie.id, GET_COMMUNITYUSERROLE_AND_USER_AND_POST) : null\r\n\r\n    //If user is not logged in return a page with login and register\r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <main className=\"account\">\r\n                <h3>Account</h3>\r\n                <LoginOrRegister />\r\n            </main>\r\n        )\r\n    }\r\n\r\n    //If query from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"account\">\r\n                <h3><b>Account</b></h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"account\">\r\n            <section className=\"container\">\r\n                <div className=\"row\">\r\n                    <h3 className=\"header-3\"><b>Account</b></h3>\r\n                    <div className=\"posts-list\">\r\n                        <div className=\"posts\">\r\n                            <section className=\"create-post-nav\">\r\n                                <CreatePostNav />\r\n                            </section>\r\n                            <section className=\"post-list\">\r\n                                <Card className=\"card\">\r\n                                    {\r\n                                        (query.communityuserrole.length === 0) ?\r\n                                            <Empty />\r\n                                            :\r\n                                            <Tabs type='line'>\r\n                                                {\r\n                                                    query.communityuserrole.map((item, index) => (\r\n                                                        <TabPane tab={item.community.title} key={item.community_id}>\r\n                                                            <List\r\n                                                                itemLayout=\"vertical\"\r\n                                                                size=\"large\"\r\n                                                                className=\"account-community-post\"\r\n                                                                pagination={{\r\n                                                                    position: 'bottom',\r\n                                                                    pageSize: 5\r\n                                                                }}\r\n                                                                dataSource={query.communityuserrole[index].community.post}\r\n                                                                renderItem={item => (\r\n                                                                    <ContentCard item={item} refetch={queryRefetch}/>\r\n                                                                )}\r\n                                                            >\r\n                                                            </List>\r\n                                                        </TabPane>\r\n                                                    ))\r\n                                                }\r\n                                            </Tabs>\r\n                                    }\r\n                                </Card>\r\n                            </section>\r\n                        </div>\r\n                        <div className=\"personal\">\r\n                            <PersonalCard user={query.user}/>\r\n                            <Card className=\"personal-post-card\" title=\"List of your Posts\">\r\n                                <List\r\n                                    itemLayout=\"vertical\"\r\n                                    size=\"small\"\r\n                                    className=\"user-post\"\r\n                                    pagination={{\r\n                                        position: 'bottom',\r\n                                        pageSize: 10\r\n                                    }}\r\n                                    dataSource={query.post}\r\n                                    renderItem={item => (\r\n                                        <List.Item key={item.id}>\r\n                                            <Link to={\"/viewpost/\" + item.id}>{item.title}</Link>\r\n                                        </List.Item>\r\n                                    )}\r\n                                >\r\n                                </List>\r\n                            </Card>\r\n                            <Card className=\"personal-community-card\" title='List of your Communities'>\r\n                                <List\r\n                                    itemLayout=\"vertical\"\r\n                                    size=\"small\"\r\n                                    className=\"about-community\"\r\n                                    dataSource={query.communityuserrole}\r\n                                    pagination={{\r\n                                        position: 'bottom',\r\n                                        pageSize: 10\r\n                                    }}\r\n                                    renderItem={item => (\r\n                                        <List.Item key={item.community.id}>\r\n                                            <Link to={{ pathname: \"/community/\" + item.community.id }}>{item.community.title}</Link>\r\n                                        </List.Item>\r\n                                    )}\r\n                                >\r\n                                </List>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\n//dataSource={query.communityuserrole[0].post}","import { validateForm } from \"../functions/validateForm\"\r\n\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Message from 'antd/lib/message'\r\nimport Modal from 'antd/lib/modal'\r\n\r\nconst { confirm } = Modal\r\n\r\nexport function OnFinish_CheckEmailAndPassword(checkEmailAndPassword, user_id, values, setInputObject) {\r\n    //If all input in form is filled out\r\n    if (validateForm(values)) {\r\n        setInputObject({\r\n            id: user_id,\r\n            email: values.email,\r\n            username: values.username\r\n        })\r\n        //mutation checks and changes user information concerning account\r\n        checkEmailAndPassword({\r\n            variables: {\r\n                id: user_id,\r\n                email: values.email,\r\n                password: values.password\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function OnFinish_CheckPassword(checkPassword, user_id, values, setInputObject) {\r\n    //If all input in form is filled out\r\n    if (validateForm(values)) {\r\n        if (values.NewPassword === values.ConfirmPassword) {//Provided New Password and duplicate new password are the same\r\n            setInputObject({\r\n                id: user_id,\r\n                password: values.NewPassword\r\n            })\r\n            //mutation checks and changes password\r\n            checkPassword({\r\n                variables: {\r\n                    id: user_id,\r\n                    password: values.Password\r\n                }\r\n            })\r\n        } else {\r\n            Message.warning({//Provided New Password and duplicate new password are the not same\r\n                content: \"New passwords don't match\",\r\n                style: {\r\n                    marginTop: '5vh',\r\n                },\r\n            }, 10)\r\n        }\r\n    }\r\n}\r\n\r\nexport function OnFinish_CreateQuestion(checkPassword_CreateQuestion, user_id, values, setInputObject) {\r\n    //If all input in form is filled out\r\n    if (validateForm(values)) {\r\n        setInputObject({\r\n            user_id: user_id,\r\n            question: values.question,\r\n            answer: values.answer\r\n        })\r\n        //mutation checks and changes password\r\n        checkPassword_CreateQuestion({\r\n            variables: {\r\n                id: user_id,\r\n                password: values.password\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function OnFinish_UpdateQuestion(checkPassword_UpdateQuestion, user_id, values, setInputObject) {\r\n    //If all input in form is filled out\r\n    if (validateForm(values)) {\r\n        setInputObject({\r\n            user_id: user_id,\r\n            question: values.question,\r\n            answer: values.answer\r\n        })\r\n        //mutation checks and changes password\r\n        checkPassword_UpdateQuestion({\r\n            variables: {\r\n                id: user_id,\r\n                password: values.password\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function OnFinish_RemoveQuestion(checkPassword_RemoveQuestion, user_id, question, values, setInputObject) {\r\n    //If all input in form is filled out\r\n    if (validateForm(values)) {\r\n        setInputObject({\r\n            user_id: user_id,\r\n            question: question\r\n        })\r\n        //mutation checks and changes password\r\n        checkPassword_RemoveQuestion({\r\n            variables: {\r\n                id: user_id,\r\n                password: values.password\r\n            }\r\n        })\r\n    }\r\n}\r\n//Modal form for updating security questions\r\nexport function UpdateConfirm(checkPassword_UpdateQuestion, question, user_id, setInputObject) {\r\n    confirm({\r\n        title: 'Update Security Question',\r\n        icon: null,\r\n        width: '700px',\r\n        closable: true,\r\n        okButtonProps: { style: { display: 'none' } },\r\n        cancelButtonProps: { style: { display: 'none' } },\r\n        content:\r\n            <Form\r\n                name=\"update-question\"\r\n                style={{ marginTop: '20px' }}\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 14 }}\r\n                onFinish={(values) => OnFinish_UpdateQuestion(checkPassword_UpdateQuestion, user_id, values, setInputObject)}\r\n                initialValues={{\r\n                    [\"question\"]: question\r\n                }}\r\n            >\r\n                <Form.Item label=\"Question\" name=\"question\">\r\n                    <Input type=\"text\" placeholder=\"Enter security question\" autoComplete=\"new-password\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Answer\" name=\"answer\">\r\n                    <Input type=\"text\" placeholder=\"Enter answer to security question\" autoComplete=\"new-password\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" name=\"password\">\r\n                    <Input type=\"password\" placeholder=\"Enter Password to verify identity\" autoComplete=\"new-password\" />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ offset: 6, span: 14 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n    })\r\n}\r\n\r\n//Modal form for removing security questions\r\nexport function RemoveConfirm(checkPassword_RemoveQuestion, question, user_id, setInputObject) {\r\n    confirm({\r\n        title: 'Remove Security Question: ' + question,\r\n        icon: null,\r\n        width: '700px',\r\n        closable: true,\r\n        okButtonProps: { style: { display: 'none' } },\r\n        cancelButtonProps: { style: { display: 'none' } },\r\n        content:\r\n            <Form\r\n                name=\"remove-question\"\r\n                style={{ marginTop: '20px' }}\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 14 }}\r\n                onFinish={(values) => OnFinish_RemoveQuestion(checkPassword_RemoveQuestion, user_id, question, values, setInputObject)}\r\n            >\r\n                <Form.Item label=\"Password\" name=\"password\">\r\n                    <Input type=\"password\" placeholder=\"Enter Password to verify identity\" autoComplete=\"new-password\" />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ offset: 6, span: 14 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n    })\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\n\r\nimport Form from 'antd/lib/form'\r\nimport Input from 'antd/lib/input'\r\nimport Tabs from 'antd/lib/tabs'\r\nimport Button from 'antd/lib/button'\r\nimport Message from 'antd/lib/message'\r\nimport List from 'antd/lib/list'\r\nimport EditOutlined from '@ant-design/icons/EditOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\n\r\nimport LoginOrRegister from '../../components/commons/LoginOrRegister/login-or-register'\r\nimport { OnFinish_CheckEmailAndPassword, OnFinish_CheckPassword, UpdateConfirm, RemoveConfirm, OnFinish_CreateQuestion} from '../../components/commons/accountsettings/functions'\r\nimport { GetGraphqlQueryID_Refetch } from '../../components/commons/functions/getgraphqlquery'\r\nimport { useCookies } from 'react-cookie'\r\nimport { isLiteralObject } from '../../components/commons/functions/isLiteralObject'\r\nimport {\r\n    GET_USER,\r\n    CHANGE_USER_INFO,\r\n    CHECK_USER_PASSWORD,\r\n    CHECK_EMAIL_AND_PASSWORD,\r\n    CHANGE_USER_PASSWORD,\r\n    GET_SECURITY_QUESTIONS_BY_AUTHOR_ID,\r\n    CREATE_SECURITY_QUESTION,\r\n    UPDATE_SECURITY_QUESTION,\r\n    REMOVE_SECURITY_QUESTION\r\n} from '../../queries/posts'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport default function AccountSettings() {\r\n    const [cookies, set] = useCookies(['userCookie'])\r\n    const [inputObject, setInputObject] = useState(null)\r\n    const [accountForm] = Form.useForm()\r\n    const [passwordForm] = Form.useForm()\r\n    const [questionForm] = Form.useForm()\r\n    const [changeUserInfo] = useMutation(CHANGE_USER_INFO)\r\n    const [changePassword] = useMutation(CHANGE_USER_PASSWORD)\r\n    const [createQuestion] = useMutation(CREATE_SECURITY_QUESTION)\r\n    const [updateQuestion] = useMutation(UPDATE_SECURITY_QUESTION)\r\n    const [removeQuestion] = useMutation(REMOVE_SECURITY_QUESTION)\r\n\r\n    const [securityQuestions, refetch] = (cookies.userCookie !== undefined) ? GetGraphqlQueryID_Refetch(cookies.userCookie.id, GET_SECURITY_QUESTIONS_BY_AUTHOR_ID) : null\r\n\r\n    const [resetCookies] = useLazyQuery(GET_USER, {\r\n        onCompleted: async (data) => {\r\n            if (isLiteralObject(data)) {\r\n                set('userCookie', data.user, { path: '/', sameSite: 'lax', secure: true, expires: 0 })//Set session cookie for users\r\n            } else {\r\n                Message.warning({\r\n                    content: 'An error has occurred',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 10)\r\n            }\r\n        },\r\n        fetchPolicy: \"network-only\"\r\n    })\r\n\r\n    const [checkEmailAndPassword] = useLazyQuery(CHECK_EMAIL_AND_PASSWORD, {\r\n        onCompleted: async (results) => {\r\n            //Queried password returns if password is correct for current uer\r\n            if (results.passwordCheck.id !== null) {\r\n                //Queried email Check Query is null therefore not taken or queried email is the same as current user\r\n                if (results.emailCheck.id === null || results.emailCheck.email === cookies.userCookie.email) {\r\n                    await changeUserInfo({ variables: { user: inputObject } })//mutation to change account info\r\n                    await resetCookies({ variables: { id: cookies.userCookie.id } })//reset session cookies based of changed account information\r\n                    accountForm.setFieldsValue({ password: '' });\r\n                    Message.success({\r\n                        content: 'Account detail has been updated',\r\n                        style: {\r\n                            marginTop: '5vh',\r\n                        },\r\n                    }, 6)\r\n                } else {\r\n                    Message.warning({\r\n                        content: 'Email is already in use. Try another email address.',\r\n                        style: {\r\n                            marginTop: '5vh',\r\n                        },\r\n                    }, 6)\r\n                }\r\n            } else {\r\n                Message.warning({\r\n                    content: 'Password is incorrect, try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: \"network-only\"\r\n    })\r\n\r\n    const [checkPassword] = useLazyQuery(CHECK_USER_PASSWORD, {\r\n        onCompleted: async (results) => {\r\n            //If password is correct return a non null query\r\n            if (results.user.id !== null) {\r\n                await changePassword({ variables: { user: inputObject } })//mutation to change current password\r\n                passwordForm.resetFields()//form reset inputs to blank\r\n                Message.success({\r\n                    content: 'Your password has been updated',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            } else {\r\n                Message.warning({\r\n                    content: 'Password is incorrect, try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n\r\n    const [checkPassword_CreateQuestion] = useLazyQuery(CHECK_USER_PASSWORD, {\r\n        onCompleted: async (results) => {\r\n            //If password is correct return a non null query\r\n            if (results.user.id !== null) {\r\n                await createQuestion({ variables: { securityQuestion: inputObject } })//mutation to change current password\r\n                refetch()//form reset inputs to blank\r\n                questionForm.resetFields()//form reset inputs to blank\r\n                Message.success({\r\n                    content: 'You have successfully created a security question',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            } else {\r\n                Message.warning({\r\n                    content: 'Password is incorrect, try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n    const [checkPassword_UpdateQuestion] = useLazyQuery(CHECK_USER_PASSWORD, {\r\n        onCompleted: async (results) => {\r\n            //If password is correct return a non null query\r\n            if (results.user.id !== null) {\r\n                await updateQuestion({ variables: { securityQuestion: inputObject } })//mutation to change current password\r\n                refetch()//form reset inputs to blank\r\n                Message.success({\r\n                    content: 'You have successfully updated a security question',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            } else {\r\n                Message.warning({\r\n                    content: 'Password is incorrect, try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n\r\n    const [checkPassword_RemoveQuestion] = useLazyQuery(CHECK_USER_PASSWORD, {\r\n        onCompleted: async (results) => {\r\n            //If password is correct return a non null query\r\n            if (results.user.id !== null) {\r\n                await removeQuestion({ variables: { securityQuestion: inputObject } })//mutation to change current password\r\n                refetch()//form reset inputs to blank\r\n                Message.success({\r\n                    content: 'You have successfully removed a security question',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            } else {\r\n                Message.warning({\r\n                    content: 'Password is incorrect, try again',\r\n                    style: {\r\n                        marginTop: '5vh',\r\n                    },\r\n                }, 6)\r\n            }\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    })\r\n\r\n    //If user is not logged in return a page with login and register\r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <main className=\"accountsettings\">\r\n                <h3 className=\"header-3\"><b>Account Settings</b></h3>\r\n                <LoginOrRegister />\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"accountsettings\">\r\n            <section className=\"container\">\r\n                <div className=\"row\">\r\n                    <h3 className=\"header-3\"><b>Account Settings</b></h3>\r\n                    <Tabs type=\"card\">\r\n                        <TabPane tab=\"Change Account Information\" key=\"1\">\r\n                            <Form\r\n                                name=\"edit-info\"\r\n                                labelCol={{ span: 8 }}\r\n                                wrapperCol={{ span: 8 }}\r\n                                initialValues={{\r\n                                    [\"username\"]: cookies.userCookie.username,\r\n                                    [\"email\"]: cookies.userCookie.email\r\n                                }}\r\n                                form={accountForm}\r\n                                onFinish={(values) => OnFinish_CheckEmailAndPassword(checkEmailAndPassword, cookies.userCookie.id, values, setInputObject)}\r\n                            >\r\n                                <Form.Item label=\"Username\" name=\"username\">\r\n                                    <Input placeholder=\"Enter username you wish to change to.\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Email\" name=\"email\">\r\n                                    <Input type=\"email\" placeholder=\"Enter email address you wish to change to.\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Password\" name=\"password\">\r\n                                    <Input type=\"password\" placeholder=\"Enter password to verify identity\" autoComplete=\"new-password\" />\r\n                                </Form.Item>\r\n                                <Form.Item wrapperCol={{ offset: 8, span: 8 }}>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </TabPane>\r\n                        <TabPane tab=\"Change Password\" key=\"2\">\r\n                            <Form\r\n                                name=\"edit-password\"\r\n                                labelCol={{ span: 8 }}\r\n                                wrapperCol={{ span: 8 }}\r\n                                form={passwordForm}\r\n                                onFinish={(values) => OnFinish_CheckPassword(checkPassword, cookies.userCookie.id, values, setInputObject)}\r\n                            >\r\n                                <Form.Item label=\"Password\" name=\"Password\">\r\n                                    <Input type=\"password\" placeholder=\"Enter Password to verify identity\" autoComplete=\"new-password\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"New Password\" name=\"NewPassword\">\r\n                                    <Input type=\"password\" placeholder=\"Enter New Password\" autoComplete=\"new-password\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"New Password\" name=\"ConfirmPassword\">\r\n                                    <Input type=\"password\" placeholder=\"Re-enter New Password\" autoComplete=\"new-password\" />\r\n                                </Form.Item>\r\n                                <Form.Item wrapperCol={{ offset: 8, span: 8 }}>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </TabPane>\r\n                        <TabPane tab=\"Security Questions\" key=\"3\">\r\n                            <div className='question-display-form'>\r\n                                <List\r\n                                    className='question-display'\r\n                                    header={<strong>Security questions for {cookies.userCookie.username}</strong>}\r\n                                    bordered\r\n                                    dataSource={securityQuestions.security_questions}\r\n                                    renderItem={(item) => (\r\n                                        <List.Item className='list-items'>\r\n                                            <div className='question-actions'>\r\n                                                <div className='question'>{item.question}</div>\r\n                                                <div className='actions'>\r\n                                                    <EditOutlined onClick={() => UpdateConfirm(checkPassword_UpdateQuestion, item.question, cookies.userCookie.id, setInputObject)} /> \r\n                                                    <DeleteOutlined onClick={() => RemoveConfirm(checkPassword_RemoveQuestion, item.question, cookies.userCookie.id, setInputObject)}/>\r\n                                                </div>\r\n                                            </div>\r\n                                        </List.Item>\r\n                                    )}\r\n                                >\r\n                                </List>\r\n\r\n                                <Form\r\n                                    className=\"question-form\"\r\n                                    labelCol={{ span: 8 }}\r\n                                    wrapperCol={{ span: 18 }}\r\n                                    form={questionForm}\r\n                                    onFinish={(values) => OnFinish_CreateQuestion(checkPassword_CreateQuestion, cookies.userCookie.id, values, setInputObject)}\r\n                                >\r\n                                    <Form.Item label=\"Security Question\" name=\"question\">\r\n                                        <Input type=\"text\" placeholder=\"Enter Security Question\" autoComplete='new-password' />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Security Answer\" name=\"answer\">\r\n                                        <Input type=\"text\" placeholder=\"Enter Security Answer\" autoComplete='new-password' />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item label=\"Password\" name=\"password\">\r\n                                        <Input type=\"password\" placeholder=\"Enter Password to verify identity\" autoComplete='new-password' />\r\n                                    </Form.Item>\r\n                                    <Form.Item wrapperCol={{ offset: 8, span: 8 }}>\r\n                                        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        </TabPane>\r\n                    </Tabs>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    )\r\n}","import Modal from 'antd/lib/modal'\r\nimport Message from 'antd/lib/message'\r\nimport Popconfirm from 'antd/lib/popconfirm'\r\nimport Dropdown from 'antd/lib/dropdown'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Menu from 'antd/lib/menu'\r\nimport Collapse from 'antd/lib/collapse'\r\nimport Input from 'antd/lib/input'\r\nimport Button from 'antd/lib/button'\r\nimport Tag from 'antd/lib/tag'\r\nimport Typography from 'antd/lib/typography'\r\nimport Form from 'antd/lib/form'\r\nimport Card from 'antd/lib/card'\r\nimport DropdownButton from 'antd/lib/dropdown/dropdown-button'\r\nimport MessageOutlined from '@ant-design/icons/MessageOutlined'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\n\r\nimport moment from 'moment'\r\nconst { confirm } = Modal\r\nconst { Text, Title } = Typography\r\nconst { Panel } = Collapse\r\n\r\nconst onFinish = (values, cookies, selectedUser, setSelectedUser, sendMessage, messageRefetch, form) => {\r\n    selectedUser.forEach(async item =>\r\n        await sendMessage({\r\n            variables: {\r\n                message: {\r\n                    sender_id: cookies.userCookie.id,\r\n                    recipient_id: item.id,\r\n                    subject_line: values.subject_line,\r\n                    message: values.message\r\n                }\r\n            }\r\n        })\r\n    )\r\n    //reset form\r\n    form.resetFields()\r\n    setSelectedUser([])\r\n    messageRefetch()\r\n    Message.success({\r\n        content: 'Message has been sent.',\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n}\r\n\r\nconst responseOnFinish = async (values, item, sendMessage, messageRefetch) => {\r\n    await sendMessage({\r\n        variables: {\r\n            message: {\r\n                sender_id: item.recipient_id,\r\n                recipient_id: item.sender_id,\r\n                subject_line: \"RE: \" + item.subject_line,\r\n                message: values.response\r\n            }\r\n        }\r\n    })\r\n    messageRefetch()\r\n    Modal.destroyAll()\r\n    Message.success({\r\n        content: 'Reply has been has been sent.',\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n}\r\n\r\nfunction responseConfirm(item, sendMessage, messageRefetch) {\r\n    confirm({\r\n        title: 'Response to ' + item.subject_line,\r\n        icon: null,\r\n        content:\r\n            <Form onFinish={(values) => responseOnFinish(values, item, sendMessage, messageRefetch)}>\r\n                <Form.Item name='response'>\r\n                    <Input placeholder=\"Input your response here...\" />\r\n                </Form.Item>\r\n                <Form.Item style={{ float: 'right' }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>,\r\n        okButtonProps: { style: { display: 'none' } },\r\n        cancelButtonProps: { style: { display: 'none' } },\r\n        closable: true,\r\n        maskClosable: true\r\n    });\r\n}\r\n\r\nasync function deleteMessageOnFinish(item, isSender, deleteMessage, deleteMessageSender_Recipient, messageRefetch) {\r\n    //console.log('Sender: ' + item.sender_delete + ' Recipient: ' + item.recipient_delete )\r\n    if (isSender) {//Sender\r\n        if (item.recipient_delete === 1) {\r\n            //If recipient of message deleted and you are deleting, delete from database\r\n            await deleteMessage({\r\n                variables: {\r\n                    message: {\r\n                        id: item.id\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            await deleteMessageSender_Recipient({\r\n                //If recipient of message is not deleted and you are deleting, updating by setting a flag\r\n                variables: {\r\n                    message: {\r\n                        id: item.id,\r\n                        sender_delete: 1,\r\n                        recipient_delete: 0\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    } else {//Recipient\r\n        if (item.sender_delete === 1) {\r\n            //If sender of message deleted and you are deleting, delete from database\r\n            await deleteMessage({\r\n                variables: {\r\n                    message: {\r\n                        id: item.id\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            await deleteMessageSender_Recipient({\r\n                //If sender of message is not deleted and you are deleting, updating by setting a flag\r\n                variables: {\r\n                    message: {\r\n                        id: item.id,\r\n                        sender_delete: 0,\r\n                        recipient_delete: 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n    messageRefetch()\r\n    Message.success({\r\n        content: 'Message has been deleted.',\r\n        style: {\r\n            marginTop: '5vh',\r\n        },\r\n    }, 10)\r\n}\r\n\r\nconst SentFromMessage = ({ recipientFilter, setRecipientFilter, messageQuery, deleteMessage, deleteMessageSender_Recipient, sendMessage, messageRefetch }) => {\r\n    return (\r\n        <div className=\"sentFromMessage\">\r\n            <Title level={4} type='secondary'>Sent From</Title>\r\n            <Dropdown.Button\r\n                overlay={\r\n                    <Menu>\r\n                        <Menu.Item\r\n                            key={0}\r\n                            onClick={() => setRecipientFilter('')}\r\n                        >\r\n                            All Users\r\n                        </Menu.Item>\r\n                        {\r\n                            [...new Set(messageQuery.message.map(item => item.sender))].map((item) => {\r\n                                return (\r\n                                    <Menu.Item key={item.id} onClick={() => setRecipientFilter(item.username)}>\r\n                                        {item.username}\r\n                                    </Menu.Item>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Menu>\r\n                }\r\n            >\r\n                {(recipientFilter.length === 0) ? 'User Filter - Non Selected' : 'All messages from ' + recipientFilter}\r\n            </Dropdown.Button>\r\n            <Collapse className=\"collapse\">\r\n                {\r\n                    messageQuery.message.map(item => {\r\n                        if (recipientFilter === '' || item.sender.username === recipientFilter) {\r\n                            return (\r\n                                <Panel\r\n                                    className='panel'\r\n                                    header={\r\n                                        <span className=\"header_span\">\r\n                                            <span className=\"subject\" style={{ float: 'left' }}>\r\n                                                Subject: <strong>{item.subject_line}</strong>\r\n                                            </span>\r\n                                            <span className=\"date\" style={{ float: 'right' }}>\r\n                                                {' Sent by '} {<Text type='secondary'>{item.sender.username}</Text>} {' '}\r\n                                                {\r\n                                                    <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a')}>\r\n                                                        {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                                                    </Tooltip>\r\n                                                }\r\n                                            </span>\r\n                                        </span>\r\n                                    }\r\n                                    key={item.id}\r\n                                    className=\"panel\"\r\n                                >\r\n                                    <Card\r\n                                        bordered={false}\r\n                                        actions={[\r\n                                            <Popconfirm\r\n                                                title=\"Are you sure you want to delete this message?\"\r\n                                                onConfirm={() => deleteMessageOnFinish(item, 0, deleteMessage, deleteMessageSender_Recipient, messageRefetch)}\r\n                                                icon={null}\r\n                                                okText=\"Yes\"\r\n                                                cancelText=\"No\"\r\n                                            >\r\n                                                <DeleteOutlined />\r\n                                            </Popconfirm>,\r\n                                            <MessageOutlined onClick={() => responseConfirm(item, sendMessage, messageRefetch)} />\r\n                                        ]}\r\n                                    >\r\n                                        {item.message}\r\n                                    </Card>\r\n                                </Panel>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SentToMessage = ({ senderFilter, setSenderFilter, messageQuery, deleteMessage, deleteMessageSender_Recipient, messageRefetch }) => {\r\n    return (\r\n        <div className=\"sentToMessage\">\r\n            <Title level={4} type='secondary'>Sent To</Title>\r\n            <Dropdown.Button\r\n                overlay={\r\n                    <Menu>\r\n                        <Menu.Item key={0} onClick={() => setSenderFilter('')}>\r\n                            All Users\r\n                        </Menu.Item>\r\n                        {\r\n                            [...new Set(messageQuery.sentMessage.map(item => item.recipient))].map((item) => {\r\n                                return (\r\n                                    <Menu.Item key={item.id} onClick={() => setSenderFilter(item.username)}>\r\n                                        {item.username}\r\n                                    </Menu.Item>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Menu>\r\n                }\r\n            >\r\n                {(senderFilter.length === 0) ? 'User Filter - Non Selected' : 'All messages sent to ' + senderFilter}\r\n            </Dropdown.Button>\r\n            <Collapse className=\"collapse\">\r\n                {\r\n                    messageQuery.sentMessage.map(item => {\r\n                        if (senderFilter === '' || item.recipient.username === senderFilter) {\r\n                            return (\r\n                                <Panel\r\n                                    className='panel'\r\n                                    header={\r\n                                        <span className=\"header_span\">\r\n                                            <span className=\"subject\" style={{ float: 'left' }}>\r\n                                                Subject: <strong>{item.subject_line}</strong>\r\n                                            </span>\r\n                                            <span className=\"date\" style={{ float: 'right' }}>\r\n                                                {` Sent to ${item.recipient.username} `}\r\n                                                {\r\n                                                    <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a')}>\r\n                                                        {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                                                    </Tooltip>\r\n                                                }\r\n                                            </span>\r\n                                        </span>\r\n                                    }\r\n                                    key={item.id}\r\n                                    className=\"panel\"\r\n                                >\r\n                                    <Card\r\n                                        bordered={false}\r\n                                        actions={[\r\n                                            <Popconfirm\r\n                                                title=\"Are you sure you want to delete this message?\"\r\n                                                onConfirm={() => deleteMessageOnFinish(item, 1, deleteMessage, deleteMessageSender_Recipient, messageRefetch)}\r\n                                                icon={null}\r\n                                                okText=\"Yes\"\r\n                                                cancelText=\"No\"\r\n                                            >\r\n                                                <DeleteOutlined />\r\n                                            </Popconfirm>\r\n                                        ]}\r\n                                    >\r\n                                        {item.message}\r\n                                    </Card>\r\n                                </Panel>\r\n                            )\r\n                        }\r\n\r\n                    })\r\n                }\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SendMessage = ({ selectedUser, setSelectedUser, search, setSearch, getAllUserQuery, sendMessage, messageRefetch, cookies, form }) => {\r\n    return (\r\n        <Form\r\n            className=\"sendMessage\"\r\n            name='basic'\r\n            onFinish={(values) => onFinish(values, cookies, selectedUser, setSelectedUser, sendMessage, messageRefetch, form)}\r\n            layout='vertical'\r\n            form={form}\r\n        >\r\n            <Form.Item label='Recipient' className='recipient'>\r\n                <span className='tag-span'>\r\n                    {\r\n                        selectedUser.map((item) => {\r\n                            return (\r\n                                <Tag\r\n                                    key={item.id}\r\n                                    closable\r\n                                    onClose={() => setSelectedUser(selectedUser.filter((user) => user.id !== item.id))}\r\n                                >\r\n                                    {item.username}\r\n                                </Tag>\r\n                            )\r\n                        })\r\n                    }\r\n                </span>\r\n                <DropdownButton\r\n                    overlay={\r\n                        <Menu>\r\n                            <Menu.Item >\r\n                                <Input placeholder=\"Search User(s)\" onClick={(event) => event.stopPropagation()} onChange={(e) => { setSearch(e.target.value) }} />\r\n                            </Menu.Item>\r\n                            {\r\n                                getAllUserQuery.user.map(item => {\r\n                                    if (item.username.toLowerCase().includes(search.toLowerCase()) && !selectedUser.find((obj) => obj.id === item.id) && item.id !== cookies.userCookie.id) {\r\n                                        return (\r\n                                            <Menu.Item\r\n                                                key={item.id}\r\n                                                onClick={() => setSelectedUser([...selectedUser, { \"id\": item.id, \"username\": item.username }])}\r\n                                            >\r\n                                                {item.username}\r\n                                            </Menu.Item>\r\n                                        )\r\n                                    }\r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    }\r\n                >\r\n                    Select user(s) to send a message\r\n                </DropdownButton>\r\n            </Form.Item>\r\n            <Form.Item label='Subject Line' name='subject_line'>\r\n                <Input placeholder=\"Subject Line\" />\r\n            </Form.Item>\r\n            <Form.Item label='Message' name='message' className='message'>\r\n                <Input.TextArea placeholder=\"Message\" className='textArea'/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport { SentFromMessage, SentToMessage, SendMessage }","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Form from 'antd/lib/form'\r\nimport Tabs from 'antd/lib/tabs'\r\n\r\nimport LoginOrRegister from '../../components/commons/LoginOrRegister/login-or-register'\r\nimport { SentFromMessage, SentToMessage, SendMessage } from '../../components/commons/inbox'\r\nimport { isLiteralObject } from '../../components/commons/functions/isLiteralObject'\r\nimport { GetGraphqlQueryID_Refetch, GetGraphqlQuery } from '../../components/commons/functions/getgraphqlquery'\r\nimport { GET_MESSAGES_AND_SENT_MESSAGES, SEND_MESSAGE, DELETE_MESSAGE, DELETE_MESSAGE_SENDER_RECIPIENT, GET_ALL_USER } from '../../queries/posts'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nexport default function Inbox() {\r\n    const [cookies] = useCookies(['userCookie'])\r\n    let [messageQuery, messageRefetch] = (cookies.userCookie !== undefined) ? GetGraphqlQueryID_Refetch(cookies.userCookie.id, GET_MESSAGES_AND_SENT_MESSAGES) : [null, null]\r\n    let getAllUserQuery = GetGraphqlQuery(GET_ALL_USER)\r\n    const [selectedUser, setSelectedUser] = useState([])\r\n    const [search, setSearch] = useState('')\r\n    const [recipientFilter, setRecipientFilter] = useState('')\r\n    const [senderFilter, setSenderFilter] = useState('')\r\n    const [sendMessage] = useMutation(SEND_MESSAGE)\r\n    const [deleteMessage] = useMutation(DELETE_MESSAGE)\r\n    const [deleteMessageSender_Recipient] = useMutation(DELETE_MESSAGE_SENDER_RECIPIENT)\r\n    const [form] = Form.useForm()\r\n\r\n    //If user is not logged in return a page with login and register\r\n    if (cookies.userCookie === undefined) {\r\n        return (\r\n            <main className=\"inbox\">\r\n                <h3>Inbox</h3>\r\n                <LoginOrRegister />\r\n            </main>\r\n        )\r\n    }\r\n\r\n    //If messageQuery from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(messageQuery) || !isLiteralObject(getAllUserQuery)) {\r\n        return (\r\n            <main className=\"inbox\">\r\n                <h3><b>Inbox</b></h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"inbox\">\r\n            <h3><b>Inbox</b></h3>\r\n            <div className=\"flex-container\">\r\n                <div className=\"flex-child\">\r\n                    <Card bordered={false}>\r\n                        <Tabs type='card'>\r\n                            <TabPane tab='Messages' key='1'>\r\n                                <div className=\"sentToandFrom\">\r\n                                    <SentFromMessage\r\n                                        recipientFilter={recipientFilter}\r\n                                        setRecipientFilter={setRecipientFilter}\r\n                                        messageQuery={messageQuery}\r\n                                        deleteMessage={deleteMessage} \r\n                                        deleteMessageSender_Recipient={deleteMessageSender_Recipient}\r\n                                        sendMessage={sendMessage}\r\n                                        messageRefetch={messageRefetch}\r\n                                    />\r\n                                    <SentToMessage\r\n                                        senderFilter={senderFilter}\r\n                                        setSenderFilter={setSenderFilter}\r\n                                        messageQuery={messageQuery}\r\n                                        deleteMessage={deleteMessage} \r\n                                        deleteMessageSender_Recipient={deleteMessageSender_Recipient}\r\n                                        messageRefetch={messageRefetch}\r\n                                    />\r\n                                </div>\r\n                            </TabPane>\r\n                            <TabPane tab='Send Message' key='2'>\r\n                                <SendMessage\r\n                                    selectedUser={selectedUser}\r\n                                    setSelectedUser={setSelectedUser}\r\n                                    search={search}\r\n                                    setSearch={setSearch}\r\n                                    getAllUserQuery={getAllUserQuery}\r\n                                    sendMessage={sendMessage}\r\n                                    messageRefetch={messageRefetch}\r\n                                    cookies={cookies}\r\n                                    form={form}\r\n                                />\r\n                            </TabPane>\r\n                        </Tabs>\r\n                    </Card>\r\n                </div>\r\n\r\n            </div>\r\n        </main>\r\n    )\r\n}","import { Link } from 'react-router-dom'\r\n\r\nimport Card from 'antd/lib/card'\r\nimport Comment from 'antd/lib/comment'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Typography from 'antd/lib/typography'\r\nimport List from 'antd/lib/list'\r\nimport MessageOutlined from '@ant-design/icons/MessageOutlined'\r\n\r\nimport moment from 'moment'\r\nconst { Text } = Typography\r\n\r\nconst Title = ({ item, user }) => {\r\n    return (\r\n        <div>\r\n            <Link to={'/community/' + item.community.id}>{item.community.title}</Link>\r\n            {<Text type='secondary'>{' Posted by ' + user.username + ' '}</Text>}\r\n            {\r\n                <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                    {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                </Tooltip>\r\n            }\r\n            <br />\r\n            <span>\r\n                <b>{item.title}</b>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CommentInCard = ({ id, item }) => {\r\n    return (\r\n        item.map(item => {\r\n            if(item.author_id === id) {\r\n                if(item.parent.id !== null && item.author_id !== item.parent.author_id) {//No parent, Parent and Child without the same author to prevent duplicate chain comments\r\n                    return(\r\n                        <Card type=\"inner\" className=\"commentincard\" key={\"child\" + item.parent.id}>\r\n                            <Comment\r\n                                key={item.parent.id}\r\n                                author={item.parent.user.username}\r\n                                content={item.parent.comment}\r\n                                datetime={\r\n                                    <Tooltip placement=\"top\" title={moment(parseInt(item.parent.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                                        {moment(moment(parseInt(item.parent.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Comment\r\n                                    author={item.user.username}\r\n                                    content={item.comment}\r\n                                    style={{ backgroundColor: \"rgba(0, 121, 211, 0.05)\", fill: 'rgb(135, 138, 140)' }}\r\n                                    datetime={\r\n                                        <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                                            {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                                        </Tooltip>\r\n                                    }\r\n                                />\r\n                            </Comment>\r\n                        </Card>\r\n                    )\r\n                } else {\r\n                    return(\r\n                        <Card type=\"inner\" className=\"commentincard\" key={\"child\" + item.id}>\r\n                            <Comment\r\n                                author={item.user.username}\r\n                                content={item.comment}\r\n                                style={{ backgroundColor: \"rgba(0, 121, 211, 0.05)\", fill: 'rgb(135, 138, 140)' }}\r\n                                datetime={\r\n                                    <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                                        {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                                    </Tooltip>\r\n                                }\r\n                            />\r\n                        </Card>\r\n                    )\r\n                }\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\n//Formats the post depending on which type it is\r\nconst ContentCard = ({ id, item, user }) => {\r\n    switch (item.type) {\r\n        case 'Post':\r\n            return (\r\n                <div className=\"content\">\r\n                    <Card\r\n                        key={item.id}\r\n                        type=\"inner\"\r\n                        className=\"card\"\r\n                        title={<Title item={item} user={user} />}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <p style={{ whiteSpace: 'pre-line' }}>{item.text}</p>\r\n                    </Card>\r\n                    <CommentInCard id={id} item={item.comment} />\r\n                </div>\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <div className=\"content\">\r\n                    <Card\r\n                        key={item.id}\r\n                        className=\"card\"\r\n                        type=\"inner\"\r\n                        title={<Title item={item} user={user} />}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <a style={{ wordWrap: 'break-word' }} href={\"http://\" + `${item.text}`}>{item.text}</a>\r\n                    </Card>\r\n                    <CommentInCard id={id} item={item.comment}/>\r\n                </div>\r\n            )\r\n        case 'Image':\r\n            return (\r\n                <div className=\"content\">\r\n                    <Card\r\n                        key={item.id}\r\n                        className=\"card\"\r\n                        type=\"inner\"\r\n                        title={<Title item={item} user={user} />}\r\n                        actions={[\r\n                            <Link to={{ pathname: \"/viewpost/\" + item.id }}><MessageOutlined key=\"message\" /></Link>\r\n                        ]}\r\n                    >\r\n                        <img alt=\"\" src={item.image} style={{ maxWidth: \"100%\" }} />\r\n                    </Card>\r\n                    <CommentInCard id={id} item={item.comment}/>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nconst StandAloneCommentTitle = ({ item, user }) => {\r\n    return(\r\n        <div>\r\n            <span>\r\n                {user.username} commented on {item.post.title}\r\n            </span>\r\n            <br />\r\n            <span>\r\n                <Link \r\n                    to={'/community/' + item.post.community_id}\r\n                    className='community_link'\r\n                >\r\n                    {item.post.community.title + ' '}\r\n                </Link>\r\n                <Text type='secondary'>\r\n                    Posted by {item.post.user.username}\r\n                </Text>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StandAloneComment = ({ item, user }) => {\r\n    return (\r\n        <Card className='comment_tree_card'>\r\n            <StandAloneCommentTitle item={item} user={user}/>\r\n            <Comment\r\n                actions={[<span key=\"comment-nested-reply-to\">Reply to</span>]}\r\n                author={<a>{user.username}</a>}\r\n                content={<p>{item.comment}</p>}\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst PostCommentCard = ({ id, isPost, item, user }) => {\r\n    if (isPost) {\r\n        return (\r\n            <ContentCard id={id} item={item} user={user} />\r\n        )\r\n    } else {\r\n        return (\r\n            <StandAloneComment item={item} user={user} />\r\n        )\r\n    }\r\n}\r\n\r\nconst Overview = ({ id, posts, comments, user }) => {\r\n    let filteredComments = comments.filter(//removes queried comments that are comments to a Post created by the viewed user, to create a Post_Card \r\n        comment => !posts.map(post => { return post.id }).includes(comment.post_id)\r\n    )\r\n    const post_comment = posts.concat(filteredComments).sort(function(a, b){\r\n        var keyA = a.created_at,\r\n            keyB = b.created_at\r\n        // Compare the 2 dates\r\n        if(keyA > keyB) {\r\n            return -1\r\n        }\r\n        if(keyA < keyB) {\r\n            return 1\r\n        }\r\n        return 0\r\n    })\r\n    return(\r\n        <List\r\n            className='overview-list'\r\n            dataSource={post_comment}\r\n            renderItem={item => (\r\n                <List.Item>\r\n                    <PostCommentCard id={id} isPost={(item.title) ? true : false} item={item} user={user}/>\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Overview\r\n\r\n//<ContentCard item={item}/>","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport List from 'antd/lib/list'\r\nimport Avatar from 'antd/lib/avatar'\r\nimport Badge from 'antd/lib/badge'\r\nimport FileTextOutlined from '@ant-design/icons/FileTextOutlined'\r\nimport LinkOutlined from '@ant-design/icons/LinkOutlined'\r\nimport ExpandAltOutlined from '@ant-design/icons/ExpandAltOutlined'\r\nimport CommentOutlined from '@ant-design/icons/CommentOutlined'\r\nimport ExportOutlined from '@ant-design/icons/ExportOutlined'\r\n\r\nconst Avatar_For_List = ({ item }) => {\r\n    switch (item.type) {\r\n        case 'Post':\r\n            return (\r\n                <Avatar shape=\"square\" size={64} icon={<FileTextOutlined />} />\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <Avatar shape=\"square\" size={64} icon={<LinkOutlined />} />\r\n            )\r\n        case 'Image':\r\n            return (\r\n                <Avatar shape=\"square\" size={64} icon={<img alt=\"\" src={item.image} style={{ maxWidth: \"100%\" }} />} />\r\n            )\r\n    }\r\n}\r\n\r\nconst Description_Actions = ({ item, expand, setExpand }) => {\r\n    switch(item.type) {\r\n        case 'Post':\r\n            return (\r\n                <div className='description-expand'>\r\n                    <span>\r\n                        <ExpandAltOutlined className='expand-icon' onClick={() => setExpand(!expand)}/> \r\n                        <Link to={'/viewpost/' + item.id}>\r\n                            <Badge count={item.comment.length} size=\"small\" overflowCount={99}><CommentOutlined className='comment-icon'/> </Badge>\r\n                        </Link>\r\n                    </span>\r\n                    <p className='post' style={{ display: (expand) ? 'block': 'none' }}> \r\n                        {item.text}\r\n                    </p>\r\n                </div>\r\n            )\r\n        case 'Image':\r\n            return (\r\n                <div className='description-expand'>\r\n                    <span>\r\n                        <ExpandAltOutlined className='expand-icon' onClick={() => setExpand(!expand)}/> \r\n                        <Link to={'/viewpost/' + item.id}>\r\n                            <Badge count={item.comment.length} size=\"small\" overflowCount={99}><CommentOutlined className='comment-icon'/> </Badge>\r\n                        </Link>\r\n                    </span>\r\n                    <img className='image' alt=\"\" src={item.image} style={{ display: (expand) ? 'block': 'none' }} />\r\n                </div>\r\n            )\r\n        case 'Link':\r\n            return (\r\n                <div className='description-expand'>\r\n                    <span>\r\n                        <a className='external-link' href={\"http://\" + `${item.text}`} target=\"_blank\" >\r\n                            <ExportOutlined />\r\n                        </a> \r\n                        <Link to={'/viewpost/' + item.id}>\r\n                            <Badge count={item.comment.length} size=\"small\" overflowCount={99}><CommentOutlined className='comment-icon'/> </Badge>\r\n                        </Link>\r\n                    </span>\r\n                </div>\r\n            )\r\n        default: \r\n            return (\r\n                <p>Error</p>\r\n            )\r\n    }\r\n}\r\n\r\nconst Description_For_List = ({ item, user }) => {\r\n    const [expand, setExpand] = useState(false)\r\n    return (\r\n        <div className='description_list'>\r\n            <span><Link to={'/community/' + item.community.id}>{\"c/\" + item.community.title}</Link> {' Posted by ' + user.username}</span>\r\n            <br />\r\n            <Description_Actions item={item} expand={expand} setExpand={setExpand} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Post_List = ({ item, user }) => {\r\n    return (\r\n        <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={item}\r\n            pagination={{ pageSize: 10, position: 'bottom', hideOnSinglePage: true}}\r\n            renderItem={item => (\r\n                <List.Item>\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar_For_List item={item} />}\r\n                        title={<Link to={'/viewpost/' + item.id}><b>{item.title}</b></Link>}\r\n                        description={<Description_For_List item={item} user={user}/>}\r\n                    />\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Post_List","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport List from 'antd/lib/list'\r\nimport Card from 'antd/lib/card'\r\nimport Comment from 'antd/lib/comment'\r\nimport Typography from 'antd/lib/typography'\r\nimport Tooltip from 'antd/lib/tooltip'\r\nimport Menu from 'antd/lib/menu'\r\nimport CommentOutlined from '@ant-design/icons/CommentOutlined'\r\nimport moment from 'moment'\r\nimport Dropdown from 'antd/lib/dropdown/dropdown'\r\nconst { Text } = Typography\r\n\r\nconst StandAloneCommentTitle = ({ item, user, id }) => {\r\n    return (\r\n        <div>\r\n            <span><CommentOutlined style={{ paddingRight: '4px' }} />{user.username} commented on <Link to={'/viewpost/' + item.post.id}>{item.post.title}</Link></span>\r\n            <br />\r\n            <span>\r\n                <Link to={'/community/' + item.post.community_id} className='community_link'>\r\n                    {'c/' + item.post.community.title + ' '}\r\n                </Link>\r\n                <Text type='secondary'>\r\n                    Posted by {(item.post.user.id !== id) ? <Link to={'/user/' + item.post.user.id}>{item.post.user.username + ' '} </Link> : item.post.user.username + ' '}\r\n                </Text>\r\n\r\n                <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                    {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                </Tooltip>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ListContent = ({ item, user, id }) => {\r\n    if (item.parent_comment_id !== null) {\r\n        return (\r\n            <Card className='list-content' title={<StandAloneCommentTitle item={item} user={user} id={id} />}>\r\n                <Comment\r\n                    key={item.parent.id}\r\n                    author={item.parent.user.username}\r\n                    content={item.parent.comment}\r\n                    datetime={\r\n                        <Tooltip placement=\"top\" title={moment(parseInt(item.parent.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                            {moment(moment(parseInt(item.parent.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                        </Tooltip>\r\n                    }\r\n                >\r\n                    <Comment\r\n                        author={item.user.username}\r\n                        content={item.comment}\r\n                        style={{ backgroundColor: \"rgba(0, 121, 211, 0.05)\", fill: 'rgb(135, 138, 140)' }}\r\n                        datetime={\r\n                            <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                                {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                            </Tooltip>\r\n                        }\r\n                    />\r\n                </Comment>\r\n            </Card>\r\n        )\r\n    } else {\r\n        return (\r\n            <Card className=\"list-content\" title={<StandAloneCommentTitle item={item} user={user} id={id} />}>\r\n                <Comment\r\n                    author={item.user.username}\r\n                    content={item.comment}\r\n                    style={{ backgroundColor: \"rgba(0, 121, 211, 0.05)\", fill: 'rgb(135, 138, 140)' }}\r\n                    datetime={\r\n                        <Tooltip placement=\"top\" title={moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm:ss a')}>\r\n                            {moment(moment(parseInt(item.created_at)).format('MMMM Do YYYY, h:mm a'), 'MMMM Do YYYY, h:mm:ss a').fromNow()}\r\n                        </Tooltip>\r\n                    }\r\n                />\r\n            </Card>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Comment_List = ({ item, user, id }) => {\r\n    return (\r\n        <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={item}\r\n            pagination={{ pageSize: 10, position: 'bottom', hideOnSinglePage: true }}\r\n            renderItem={item => (\r\n                <List.Item>\r\n                    <ListContent item={item} user={user} id={id} />\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Comment_List","import React from 'react'\r\nimport { useParams} from 'react-router-dom'\r\n\r\nimport Overview from '../../components/commons/viewaccount/Overview'\r\nimport PostList from '../../components/commons/viewaccount/Post_List'\r\nimport CommentList from '../../components/commons/viewaccount/Comment_List'\r\nimport Directory from '../../components/commons/navigation/directory'\r\nimport Avatar from 'antd/lib/avatar'\r\nimport Card from 'antd/lib/card'\r\nimport Tabs from 'antd/lib/tabs'\r\nimport { GetGraphqlQueryID } from '../../components/commons/functions/getgraphqlquery'\r\nimport { isLiteralObject } from '../../components/commons/functions/isLiteralObject'\r\nimport { GET_VIEW_ACCOUNT } from '../../queries/posts'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst PersonalCard = ({ user }) => {\r\n    return (\r\n        <Card className='personal_card'>\r\n            <div className='css-header' />\r\n            <div>\r\n                <Avatar shape=\"square\" size={80} style={{ borderStyle: 'solid 1px', backgroundColor: 'pink' }} src=\"https://joeschmoe.io/api/v1/jon\" />\r\n                <p><strong>u/{user.username}</strong></p>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default function ViewAccount() {\r\n    let { id } = useParams()\r\n    let query = GetGraphqlQueryID(id, GET_VIEW_ACCOUNT)\r\n\r\n    //If query from graphql is not available return a page with loading...\r\n    if (!isLiteralObject(query)) {\r\n        return (\r\n            <main className=\"viewAccount\">\r\n                <h3><b>View Account</b></h3>\r\n                <p style={{ textAlign: 'center', paddingTop: '80px' }}>Loading...</p>\r\n            </main>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <main className=\"viewAccount\">\r\n            <h3><b>View Account</b></h3>\r\n            <Tabs defaultActiveKey='1'>\r\n                <TabPane className='overview_tabpane' tab=\"Overview\" key=\"1\">\r\n                    <div className='post_comment_personal'>\r\n                        <div className='post_comment'>\r\n                            <Overview id={parseInt(id)} posts={query.post} comments={query.comment} user={query.user} />\r\n                        </div>\r\n                        <div className='personal'>\r\n                            <PersonalCard user={query.user} />\r\n                            <Directory />\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane className='posts_tabpane' tab=\"Posts\" key=\"2\">\r\n                    <div className='posts_personal'>\r\n                        <div className='posts'>\r\n                            <PostList item={query.post} user={query.user} />\r\n                        </div>\r\n                        <div className='personal'>\r\n                            <PersonalCard user={query.user} />\r\n                            <Directory />\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane className='comments_tabpane' tab=\"Comments\" key=\"3\">\r\n                    <div className='comments_personal'>\r\n                        <div className='comments'>\r\n                            <CommentList item={query.comment} user={query.user} id={parseInt(id)} />\r\n                        </div>\r\n                        <div className='personal'>\r\n                            <PersonalCard user={query.user} />\r\n                            <Directory />\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n            </Tabs>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default function Error() {\r\n    let history = useHistory();\r\n    return (\r\n        <main className=\"error\">\r\n            <h3 className=\"header\"><b>Error Page</b></h3>\r\n            <br />\r\n            <p className=\"text\"><b>Something Went Wrong</b></p>\r\n            <br />\r\n            <div className=\"anchor\">\r\n                <a  onClick={() => {history.goBack()}}>Go back a page</a>\r\n            </div>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default function Unauthorized() {\r\n    let history = useHistory();\r\n    return (\r\n        <main className=\"unauthorized\">\r\n            <h3 className=\"header\"><b>Unauthorized Access</b></h3>\r\n            <br />\r\n            <p className=\"text\"><b>The page you tried to access is inaccessible due to account privileges</b></p>\r\n            <br />\r\n            <div className=\"anchor\">\r\n                <a  onClick={() => {history.goBack()}}>Go back a page</a>\r\n            </div>\r\n        </main>\r\n    )\r\n}","import React from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\nimport Home from './home'\r\nimport CommunityPost from './community-post'\r\nimport Community from './communities'\r\nimport EditCommunity from './edit-community'\r\nimport CreateCommunity from './create-community'\r\nimport CreatePost from './create-post'\r\nimport ViewPost from './viewpost'\r\nimport Login from './user/login'\r\nimport Register from './user/register'\r\nimport ForgotPassword from './user/forgotpassword'\r\nimport Account from './user/account'\r\nimport AccountSettings from './user/accountsettings'\r\nimport Inbox from './user/inbox'\r\nimport ViewAccount from './user/viewAccount'\r\n\r\nimport Error from './error'\r\nimport Unauthorized from './unauthorized'\r\n\r\n//Router for my app\r\nexport default function Router() {\r\n    return (\r\n        <Switch>\r\n            <Route path='/createcommunity' component={CreateCommunity} />\r\n            <Route path='/createpost' component={CreatePost} />\r\n            <Route path='/community/:id' component={CommunityPost} />\r\n            <Route path='/communities' component={Community} />\r\n            <Route path='/editcommunity/:id' component={EditCommunity} />\r\n            <Route path='/viewpost/:id' component={ViewPost} />\r\n            <Route path='/login' component={Login} />\r\n            <Route path='/register' component={Register} />\r\n            <Route path='/forgot' component={ForgotPassword} />\r\n            <Route path='/account' component={Account} />\r\n            <Route path='/accountsettings' component={AccountSettings} />\r\n            <Route path='/inbox' component={Inbox} />\r\n            <Route path='/user/:id' component={ViewAccount} />\r\n            <Route path='/unauthorized' component={Unauthorized} />\r\n            <Route exact path='/' component={Home} />\r\n            <Route component={Error} />\r\n        </Switch>\r\n    )\r\n}","import React from 'react'\nimport Navigation from'./components/navigation'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { CookiesProvider } from 'react-cookie'\n\nimport Pages from './pages/router'\n\nfunction App() {\n  return (\n    <Router >\n      <div className=\"App\">\n        <CookiesProvider>\n          <Navigation />\n          <Pages />\n        </CookiesProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n//https://www.youtube.com/watch?v=aI3E8mQa41w\n//https://github.com/syntacticsolutions/react-blog\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport '@quasar/extras/ionicons-v4/ionicons-v4.css'\nimport reportWebVitals from './reportWebVitals'\n\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport './assets/scss/base.scss'\n\nconst cache = new InMemoryCache()\n/* \nThe http link is a terminating link that fetches GraphQL results from a GraphQL endpoint over an http connection. \nThe http link supports both POST and GET requests with the ability to change the http options on a per query basis. \nThis can be used for authentication, persisted queries, dynamic uris, and other granular updates. \n*/\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql'\n})\n\nconst client = new ApolloClient({\n  cache,\n  link: httpLink\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}